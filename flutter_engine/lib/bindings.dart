// ingore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_name

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for the Flutter Engine
///
class FlutterEngine1 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterEngine1(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterEngine1.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// `FlutterSemanticsNode` ID used as a sentinel to signal the end of a batch of
  /// semantics node updates.
  late final ffi.Pointer<ffi.Int32> _kFlutterSemanticsNodeIdBatchEnd =
      _lookup<ffi.Int32>('kFlutterSemanticsNodeIdBatchEnd');

  int get kFlutterSemanticsNodeIdBatchEnd =>
      _kFlutterSemanticsNodeIdBatchEnd.value;

  set kFlutterSemanticsNodeIdBatchEnd(int value) =>
      _kFlutterSemanticsNodeIdBatchEnd.value = value;

  /// `FlutterSemanticsCustomAction` ID used as a sentinel to signal the end of a
  /// batch of semantics custom action updates.
  late final ffi.Pointer<ffi.Int32> _kFlutterSemanticsCustomActionIdBatchEnd =
      _lookup<ffi.Int32>('kFlutterSemanticsCustomActionIdBatchEnd');

  int get kFlutterSemanticsCustomActionIdBatchEnd =>
      _kFlutterSemanticsCustomActionIdBatchEnd.value;

  set kFlutterSemanticsCustomActionIdBatchEnd(int value) =>
      _kFlutterSemanticsCustomActionIdBatchEnd.value = value;

  /// ------------------------------------------------------------------------------
  /// @brief      Creates the necessary data structures to launch a Flutter Dart
  /// application in AOT mode. The data may only be collected after
  /// all FlutterEngine instances launched using this data have been
  /// terminated.
  ///
  /// @param[in]  source    The source of the AOT data.
  /// @param[out] data_out  The AOT data on success. Unchanged on failure.
  ///
  /// @return     Returns if the AOT data could be successfully resolved.
  int FlutterEngineCreateAOTData(
    ffi.Pointer<FlutterEngineAOTDataSource> source,
    ffi.Pointer<FlutterEngineAOTData> data_out,
  ) {
    return _FlutterEngineCreateAOTData(
      source,
      data_out,
    );
  }

  late final _FlutterEngineCreateAOTDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FlutterEngineAOTDataSource>,
                  ffi.Pointer<FlutterEngineAOTData>)>>(
      'FlutterEngineCreateAOTData');
  late final _FlutterEngineCreateAOTData =
      _FlutterEngineCreateAOTDataPtr.asFunction<
          int Function(ffi.Pointer<FlutterEngineAOTDataSource>,
              ffi.Pointer<FlutterEngineAOTData>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Collects the AOT data.
  ///
  /// @warning    The embedder must ensure that this call is made only after all
  /// FlutterEngine instances launched using this data have been
  /// terminated, and that all of those instances were launched with
  /// the FlutterProjectArgs::shutdown_dart_vm_when_done flag set to
  /// true.
  ///
  /// @param[in]  data   The data to collect.
  ///
  /// @return     Returns if the AOT data was successfully collected.
  int FlutterEngineCollectAOTData(
    FlutterEngineAOTData data,
  ) {
    return _FlutterEngineCollectAOTData(
      data,
    );
  }

  late final _FlutterEngineCollectAOTDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngineAOTData)>>(
          'FlutterEngineCollectAOTData');
  late final _FlutterEngineCollectAOTData = _FlutterEngineCollectAOTDataPtr
      .asFunction<int Function(FlutterEngineAOTData)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Initialize and run a Flutter engine instance and return a handle
  /// to it. This is a convenience method for the pair of calls to
  /// `FlutterEngineInitialize` and `FlutterEngineRunInitialized`.
  ///
  /// @note       This method of running a Flutter engine works well except in
  /// cases where the embedder specifies custom task runners via
  /// `FlutterProjectArgs::custom_task_runners`. In such cases, the
  /// engine may need the embedder to post tasks back to it before
  /// `FlutterEngineRun` has returned. Embedders can only post tasks
  /// to the engine if they have a handle to the engine. In such
  /// cases, embedders are advised to get the engine handle via the
  /// `FlutterInitializeCall`. Then they can call
  /// `FlutterEngineRunInitialized` knowing that they will be able to
  /// service custom tasks on other threads with the engine handle.
  ///
  /// @param[in]  version    The Flutter embedder API version. Must be
  /// FLUTTER_ENGINE_VERSION.
  /// @param[in]  config     The renderer configuration.
  /// @param[in]  args       The Flutter project arguments.
  /// @param      user_data  A user data baton passed back to embedders in
  /// callbacks.
  /// @param[out] engine_out The engine handle on successful engine creation.
  ///
  /// @return     The result of the call to run the Flutter engine.
  int FlutterEngineRun(
    int version,
    ffi.Pointer<FlutterRendererConfig> config,
    ffi.Pointer<FlutterProjectArgs> args,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<FlutterEngine> engine_out,
  ) {
    return _FlutterEngineRun(
      version,
      config,
      args,
      user_data,
      engine_out,
    );
  }

  late final _FlutterEngineRunPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Pointer<FlutterRendererConfig>,
              ffi.Pointer<FlutterProjectArgs>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<FlutterEngine>)>>('FlutterEngineRun');
  late final _FlutterEngineRun = _FlutterEngineRunPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<FlutterRendererConfig>,
          ffi.Pointer<FlutterProjectArgs>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<FlutterEngine>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Shuts down a Flutter engine instance. The engine handle is no
  /// longer valid for any calls in the embedder API after this point.
  /// Making additional calls with this handle is undefined behavior.
  ///
  /// @note       This de-initializes the Flutter engine instance (via an implicit
  /// call to `FlutterEngineDeinitialize`) if necessary.
  ///
  /// @param[in]  engine  The Flutter engine instance to collect.
  ///
  /// @return     The result of the call to shutdown the Flutter engine instance.
  int FlutterEngineShutdown(
    FlutterEngine engine,
  ) {
    return _FlutterEngineShutdown(
      engine,
    );
  }

  late final _FlutterEngineShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineShutdown');
  late final _FlutterEngineShutdown =
      _FlutterEngineShutdownPtr.asFunction<int Function(FlutterEngine)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Initialize a Flutter engine instance. This does not run the
  /// Flutter application code till the `FlutterEngineRunInitialized`
  /// call is made. Besides Flutter application code, no tasks are
  /// scheduled on embedder managed task runners either. This allows
  /// embedders providing custom task runners to the Flutter engine to
  /// obtain a handle to the Flutter engine before the engine can post
  /// tasks on these task runners.
  ///
  /// @param[in]  version    The Flutter embedder API version. Must be
  /// FLUTTER_ENGINE_VERSION.
  /// @param[in]  config     The renderer configuration.
  /// @param[in]  args       The Flutter project arguments.
  /// @param      user_data  A user data baton passed back to embedders in
  /// callbacks.
  /// @param[out] engine_out The engine handle on successful engine creation.
  ///
  /// @return     The result of the call to initialize the Flutter engine.
  int FlutterEngineInitialize(
    int version,
    ffi.Pointer<FlutterRendererConfig> config,
    ffi.Pointer<FlutterProjectArgs> args,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<FlutterEngine> engine_out,
  ) {
    return _FlutterEngineInitialize(
      version,
      config,
      args,
      user_data,
      engine_out,
    );
  }

  late final _FlutterEngineInitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Pointer<FlutterRendererConfig>,
              ffi.Pointer<FlutterProjectArgs>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<FlutterEngine>)>>('FlutterEngineInitialize');
  late final _FlutterEngineInitialize = _FlutterEngineInitializePtr.asFunction<
      int Function(
          int,
          ffi.Pointer<FlutterRendererConfig>,
          ffi.Pointer<FlutterProjectArgs>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<FlutterEngine>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Stops running the Flutter engine instance. After this call, the
  /// embedder is also guaranteed that no more calls to post tasks
  /// onto custom task runners specified by the embedder are made. The
  /// Flutter engine handle still needs to be collected via a call to
  /// `FlutterEngineShutdown`.
  ///
  /// @param[in]  engine    The running engine instance to de-initialize.
  ///
  /// @return     The result of the call to de-initialize the Flutter engine.
  int FlutterEngineDeinitialize(
    FlutterEngine engine,
  ) {
    return _FlutterEngineDeinitialize(
      engine,
    );
  }

  late final _FlutterEngineDeinitializePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineDeinitialize');
  late final _FlutterEngineDeinitialize =
      _FlutterEngineDeinitializePtr.asFunction<int Function(FlutterEngine)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Runs an initialized engine instance. An engine can be
  /// initialized via `FlutterEngineInitialize`. An initialized
  /// instance can only be run once. During and after this call,
  /// custom task runners supplied by the embedder are expected to
  /// start servicing tasks.
  ///
  /// @param[in]  engine  An initialized engine instance that has not previously
  /// been run.
  ///
  /// @return     The result of the call to run the initialized Flutter
  /// engine instance.
  int FlutterEngineRunInitialized(
    FlutterEngine engine,
  ) {
    return _FlutterEngineRunInitialized(
      engine,
    );
  }

  late final _FlutterEngineRunInitializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineRunInitialized');
  late final _FlutterEngineRunInitialized =
      _FlutterEngineRunInitializedPtr.asFunction<int Function(FlutterEngine)>();

  int FlutterEngineSendWindowMetricsEvent(
    FlutterEngine engine,
    ffi.Pointer<FlutterWindowMetricsEvent> event,
  ) {
    return _FlutterEngineSendWindowMetricsEvent(
      engine,
      event,
    );
  }

  late final _FlutterEngineSendWindowMetricsEventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  FlutterEngine, ffi.Pointer<FlutterWindowMetricsEvent>)>>(
      'FlutterEngineSendWindowMetricsEvent');
  late final _FlutterEngineSendWindowMetricsEvent =
      _FlutterEngineSendWindowMetricsEventPtr.asFunction<
          int Function(
              FlutterEngine, ffi.Pointer<FlutterWindowMetricsEvent>)>();

  int FlutterEngineSendPointerEvent(
    FlutterEngine engine,
    ffi.Pointer<FlutterPointerEvent> events,
    int events_count,
  ) {
    return _FlutterEngineSendPointerEvent(
      engine,
      events,
      events_count,
    );
  }

  late final _FlutterEngineSendPointerEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(FlutterEngine, ffi.Pointer<FlutterPointerEvent>,
              ffi.Size)>>('FlutterEngineSendPointerEvent');
  late final _FlutterEngineSendPointerEvent =
      _FlutterEngineSendPointerEventPtr.asFunction<
          int Function(FlutterEngine, ffi.Pointer<FlutterPointerEvent>, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Sends a key event to the engine. The framework will decide
  /// whether to handle this event in a synchronous fashion, although
  /// due to technical limitation, the result is always reported
  /// asynchronously. The `callback` is guaranteed to be called
  /// exactly once.
  ///
  /// @param[in]  engine         A running engine instance.
  /// @param[in]  event          The event data to be sent. This function will no
  /// longer access `event` after returning.
  /// @param[in]  callback       The callback invoked by the engine when the
  /// Flutter application has decided whether it
  /// handles this event. Accepts nullptr.
  /// @param[in]  user_data      The context associated with the callback. The
  /// exact same value will used to invoke `callback`.
  /// Accepts nullptr.
  ///
  /// @return     The result of the call.
  int FlutterEngineSendKeyEvent(
    FlutterEngine engine,
    ffi.Pointer<FlutterKeyEvent> event,
    FlutterKeyEventCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _FlutterEngineSendKeyEvent(
      engine,
      event,
      callback,
      user_data,
    );
  }

  late final _FlutterEngineSendKeyEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FlutterEngine,
              ffi.Pointer<FlutterKeyEvent>,
              FlutterKeyEventCallback,
              ffi.Pointer<ffi.Void>)>>('FlutterEngineSendKeyEvent');
  late final _FlutterEngineSendKeyEvent =
      _FlutterEngineSendKeyEventPtr.asFunction<
          int Function(FlutterEngine, ffi.Pointer<FlutterKeyEvent>,
              FlutterKeyEventCallback, ffi.Pointer<ffi.Void>)>();

  int FlutterEngineSendPlatformMessage(
    FlutterEngine engine,
    ffi.Pointer<FlutterPlatformMessage> message,
  ) {
    return _FlutterEngineSendPlatformMessage(
      engine,
      message,
    );
  }

  late final _FlutterEngineSendPlatformMessagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  FlutterEngine, ffi.Pointer<FlutterPlatformMessage>)>>(
      'FlutterEngineSendPlatformMessage');
  late final _FlutterEngineSendPlatformMessage =
      _FlutterEngineSendPlatformMessagePtr.asFunction<
          int Function(FlutterEngine, ffi.Pointer<FlutterPlatformMessage>)>();

  /// ------------------------------------------------------------------------------
  /// @brief     Creates a platform message response handle that allows the
  /// embedder to set a native callback for a response to a message.
  /// This handle may be set on the `response_handle` field of any
  /// `FlutterPlatformMessage` sent to the engine.
  ///
  /// The handle must be collected via a call to
  /// `FlutterPlatformMessageReleaseResponseHandle`. This may be done
  /// immediately after a call to `FlutterEngineSendPlatformMessage`
  /// with a platform message whose response handle contains the handle
  /// created using this call. In case a handle is created but never
  /// sent in a message, the release call must still be made. Not
  /// calling release on the handle results in a small memory leak.
  ///
  /// The user data baton passed to the data callback is the one
  /// specified in this call as the third argument.
  ///
  /// @see       FlutterPlatformMessageReleaseResponseHandle()
  ///
  /// @param[in]  engine         A running engine instance.
  /// @param[in]  data_callback  The callback invoked by the engine when the
  /// Flutter application send a response on the
  /// handle.
  /// @param[in]  user_data      The user data associated with the data callback.
  /// @param[out] response_out   The response handle created when this call is
  /// successful.
  ///
  /// @return     The result of the call.
  int FlutterPlatformMessageCreateResponseHandle(
    FlutterEngine engine,
    FlutterDataCallback data_callback,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>> response_out,
  ) {
    return _FlutterPlatformMessageCreateResponseHandle(
      engine,
      data_callback,
      user_data,
      response_out,
    );
  }

  late final _FlutterPlatformMessageCreateResponseHandlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  FlutterEngine,
                  FlutterDataCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.Pointer<FlutterPlatformMessageResponseHandle>>)>>(
      'FlutterPlatformMessageCreateResponseHandle');
  late final _FlutterPlatformMessageCreateResponseHandle =
      _FlutterPlatformMessageCreateResponseHandlePtr.asFunction<
          int Function(
              FlutterEngine,
              FlutterDataCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.Pointer<FlutterPlatformMessageResponseHandle>>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Collects the handle created using
  /// `FlutterPlatformMessageCreateResponseHandle`.
  ///
  /// @see        FlutterPlatformMessageCreateResponseHandle()
  ///
  /// @param[in]  engine     A running engine instance.
  /// @param[in]  response   The platform message response handle to collect.
  /// These handles are created using
  /// `FlutterPlatformMessageCreateResponseHandle()`.
  ///
  /// @return     The result of the call.
  int FlutterPlatformMessageReleaseResponseHandle(
    FlutterEngine engine,
    ffi.Pointer<FlutterPlatformMessageResponseHandle> response,
  ) {
    return _FlutterPlatformMessageReleaseResponseHandle(
      engine,
      response,
    );
  }

  late final _FlutterPlatformMessageReleaseResponseHandlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(FlutterEngine,
                  ffi.Pointer<FlutterPlatformMessageResponseHandle>)>>(
      'FlutterPlatformMessageReleaseResponseHandle');
  late final _FlutterPlatformMessageReleaseResponseHandle =
      _FlutterPlatformMessageReleaseResponseHandlePtr.asFunction<
          int Function(FlutterEngine,
              ffi.Pointer<FlutterPlatformMessageResponseHandle>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Send a response from the native side to a platform message from
  /// the Dart Flutter application.
  ///
  /// @param[in]  engine       The running engine instance.
  /// @param[in]  handle       The platform message response handle.
  /// @param[in]  data         The data to associate with the platform message
  /// response.
  /// @param[in]  data_length  The length of the platform message response data.
  ///
  /// @return     The result of the call.
  int FlutterEngineSendPlatformMessageResponse(
    FlutterEngine engine,
    ffi.Pointer<FlutterPlatformMessageResponseHandle> handle,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return _FlutterEngineSendPlatformMessageResponse(
      engine,
      handle,
      data,
      data_length,
    );
  }

  late final _FlutterEngineSendPlatformMessageResponsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FlutterEngine,
              ffi.Pointer<FlutterPlatformMessageResponseHandle>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('FlutterEngineSendPlatformMessageResponse');
  late final _FlutterEngineSendPlatformMessageResponse =
      _FlutterEngineSendPlatformMessageResponsePtr.asFunction<
          int Function(
              FlutterEngine,
              ffi.Pointer<FlutterPlatformMessageResponseHandle>,
              ffi.Pointer<ffi.Uint8>,
              int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      This API is only meant to be used by platforms that need to
  /// flush tasks on a message loop not controlled by the Flutter
  /// engine.
  ///
  /// @deprecated This API will be deprecated and is not part of the stable API.
  /// Please use the custom task runners API by setting an
  /// appropriate `FlutterProjectArgs::custom_task_runners`
  /// interface. This will yield better performance and the
  /// interface is stable.
  ///
  /// @return     The result of the call.
  int __FlutterEngineFlushPendingTasksNow() {
    return ___FlutterEngineFlushPendingTasksNow();
  }

  late final ___FlutterEngineFlushPendingTasksNowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '__FlutterEngineFlushPendingTasksNow');
  late final ___FlutterEngineFlushPendingTasksNow =
      ___FlutterEngineFlushPendingTasksNowPtr.asFunction<int Function()>();

  /// ------------------------------------------------------------------------------
  /// @brief      Register an external texture with a unique (per engine)
  /// identifier. Only rendering backends that support external
  /// textures accept external texture registrations. After the
  /// external texture is registered, the application can mark that a
  /// frame is available by calling
  /// `FlutterEngineMarkExternalTextureFrameAvailable`.
  ///
  /// @see        FlutterEngineUnregisterExternalTexture()
  /// @see        FlutterEngineMarkExternalTextureFrameAvailable()
  ///
  /// @param[in]  engine              A running engine instance.
  /// @param[in]  texture_identifier  The identifier of the texture to register
  /// with the engine. The embedder may supply new
  /// frames to this texture using the same
  /// identifier.
  ///
  /// @return     The result of the call.
  int FlutterEngineRegisterExternalTexture(
    FlutterEngine engine,
    int texture_identifier,
  ) {
    return _FlutterEngineRegisterExternalTexture(
      engine,
      texture_identifier,
    );
  }

  late final _FlutterEngineRegisterExternalTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>(
          'FlutterEngineRegisterExternalTexture');
  late final _FlutterEngineRegisterExternalTexture =
      _FlutterEngineRegisterExternalTexturePtr.asFunction<
          int Function(FlutterEngine, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Unregister a previous texture registration.
  ///
  /// @see        FlutterEngineRegisterExternalTexture()
  /// @see        FlutterEngineMarkExternalTextureFrameAvailable()
  ///
  /// @param[in]  engine              A running engine instance.
  /// @param[in]  texture_identifier  The identifier of the texture for which new
  /// frame will not be available.
  ///
  /// @return     The result of the call.
  int FlutterEngineUnregisterExternalTexture(
    FlutterEngine engine,
    int texture_identifier,
  ) {
    return _FlutterEngineUnregisterExternalTexture(
      engine,
      texture_identifier,
    );
  }

  late final _FlutterEngineUnregisterExternalTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>(
          'FlutterEngineUnregisterExternalTexture');
  late final _FlutterEngineUnregisterExternalTexture =
      _FlutterEngineUnregisterExternalTexturePtr.asFunction<
          int Function(FlutterEngine, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Mark that a new texture frame is available for a given texture
  /// identifier.
  ///
  /// @see        FlutterEngineRegisterExternalTexture()
  /// @see        FlutterEngineUnregisterExternalTexture()
  ///
  /// @param[in]  engine              A running engine instance.
  /// @param[in]  texture_identifier  The identifier of the texture whose frame
  /// has been updated.
  ///
  /// @return     The result of the call.
  int FlutterEngineMarkExternalTextureFrameAvailable(
    FlutterEngine engine,
    int texture_identifier,
  ) {
    return _FlutterEngineMarkExternalTextureFrameAvailable(
      engine,
      texture_identifier,
    );
  }

  late final _FlutterEngineMarkExternalTextureFrameAvailablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>(
          'FlutterEngineMarkExternalTextureFrameAvailable');
  late final _FlutterEngineMarkExternalTextureFrameAvailable =
      _FlutterEngineMarkExternalTextureFrameAvailablePtr.asFunction<
          int Function(FlutterEngine, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Enable or disable accessibility semantics.
  ///
  /// @param[in]  engine     A running engine instance.
  /// @param[in]  enabled    When enabled, changes to the semantic contents of the
  /// window are sent via the
  /// `FlutterUpdateSemanticsNodeCallback` registered to
  /// `update_semantics_node_callback` in
  /// `FlutterProjectArgs`.
  ///
  /// @return     The result of the call.
  int FlutterEngineUpdateSemanticsEnabled(
    FlutterEngine engine,
    bool enabled,
  ) {
    return _FlutterEngineUpdateSemanticsEnabled(
      engine,
      enabled,
    );
  }

  late final _FlutterEngineUpdateSemanticsEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Bool)>>(
          'FlutterEngineUpdateSemanticsEnabled');
  late final _FlutterEngineUpdateSemanticsEnabled =
      _FlutterEngineUpdateSemanticsEnabledPtr.asFunction<
          int Function(FlutterEngine, bool)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Sets additional accessibility features.
  ///
  /// @param[in]  engine     A running engine instance
  /// @param[in]  features   The accessibility features to set.
  ///
  /// @return     The result of the call.
  int FlutterEngineUpdateAccessibilityFeatures(
    FlutterEngine engine,
    int features,
  ) {
    return _FlutterEngineUpdateAccessibilityFeatures(
      engine,
      features,
    );
  }

  late final _FlutterEngineUpdateAccessibilityFeaturesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int32)>>(
          'FlutterEngineUpdateAccessibilityFeatures');
  late final _FlutterEngineUpdateAccessibilityFeatures =
      _FlutterEngineUpdateAccessibilityFeaturesPtr.asFunction<
          int Function(FlutterEngine, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Dispatch a semantics action to the specified semantics node.
  ///
  /// @param[in]  engine       A running engine instance.
  /// @param[in]  identifier   The semantics action identifier.
  /// @param[in]  action       The semantics action.
  /// @param[in]  data         Data associated with the action.
  /// @param[in]  data_length  The data length.
  ///
  /// @return     The result of the call.
  int FlutterEngineDispatchSemanticsAction(
    FlutterEngine engine,
    int id,
    int action,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return _FlutterEngineDispatchSemanticsAction(
      engine,
      id,
      action,
      data,
      data_length,
    );
  }

  late final _FlutterEngineDispatchSemanticsActionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FlutterEngine,
              ffi.Uint64,
              ffi.Int32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('FlutterEngineDispatchSemanticsAction');
  late final _FlutterEngineDispatchSemanticsAction =
      _FlutterEngineDispatchSemanticsActionPtr.asFunction<
          int Function(FlutterEngine, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Notify the engine that a vsync event occurred. A baton passed to
  /// the platform via the vsync callback must be returned. This call
  /// must be made on the thread on which the call to
  /// `FlutterEngineRun` was made.
  ///
  /// @see        FlutterEngineGetCurrentTime()
  ///
  /// @attention  That frame timepoints are in nanoseconds.
  ///
  /// @attention  The system monotonic clock is used as the timebase.
  ///
  /// @param[in]  engine.                  A running engine instance.
  /// @param[in]  baton                    The baton supplied by the engine.
  /// @param[in]  frame_start_time_nanos   The point at which the vsync event
  /// occurred or will occur. If the time
  /// point is in the future, the engine will
  /// wait till that point to begin its frame
  /// workload.
  /// @param[in]  frame_target_time_nanos  The point at which the embedder
  /// anticipates the next vsync to occur.
  /// This is a hint the engine uses to
  /// schedule Dart VM garbage collection in
  /// periods in which the various threads
  /// are most likely to be idle. For
  /// example, for a 60Hz display, embedders
  /// should add 16.6 * 1e6 to the frame time
  /// field.
  ///
  /// @return     The result of the call.
  int FlutterEngineOnVsync(
    FlutterEngine engine,
    int baton,
    int frame_start_time_nanos,
    int frame_target_time_nanos,
  ) {
    return _FlutterEngineOnVsync(
      engine,
      baton,
      frame_start_time_nanos,
      frame_target_time_nanos,
    );
  }

  late final _FlutterEngineOnVsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(FlutterEngine, ffi.IntPtr, ffi.Uint64,
              ffi.Uint64)>>('FlutterEngineOnVsync');
  late final _FlutterEngineOnVsync = _FlutterEngineOnVsyncPtr.asFunction<
      int Function(FlutterEngine, int, int, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Reloads the system fonts in engine.
  ///
  /// @param[in]  engine.                  A running engine instance.
  ///
  /// @return     The result of the call.
  int FlutterEngineReloadSystemFonts(
    FlutterEngine engine,
  ) {
    return _FlutterEngineReloadSystemFonts(
      engine,
    );
  }

  late final _FlutterEngineReloadSystemFontsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineReloadSystemFonts');
  late final _FlutterEngineReloadSystemFonts =
      _FlutterEngineReloadSystemFontsPtr.asFunction<
          int Function(FlutterEngine)>();

  /// ------------------------------------------------------------------------------
  /// @brief      A profiling utility. Logs a trace duration begin event to the
  /// timeline. If the timeline is unavailable or disabled, this has
  /// no effect. Must be balanced with an duration end event (via
  /// `FlutterEngineTraceEventDurationEnd`) with the same name on the
  /// same thread. Can be called on any thread. Strings passed into
  /// the function will NOT be copied when added to the timeline. Only
  /// string literals may be passed in.
  ///
  /// @param[in]  name  The name of the trace event.
  void FlutterEngineTraceEventDurationBegin(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _FlutterEngineTraceEventDurationBegin(
      name,
    );
  }

  late final _FlutterEngineTraceEventDurationBeginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'FlutterEngineTraceEventDurationBegin');
  late final _FlutterEngineTraceEventDurationBegin =
      _FlutterEngineTraceEventDurationBeginPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>)>();

  /// -----------------------------------------------------------------------------
  /// @brief      A profiling utility. Logs a trace duration end event to the
  /// timeline. If the timeline is unavailable or disabled, this has
  /// no effect. This call must be preceded by a trace duration begin
  /// call (via `FlutterEngineTraceEventDurationBegin`) with the same
  /// name on the same thread. Can be called on any thread. Strings
  /// passed into the function will NOT be copied when added to the
  /// timeline. Only string literals may be passed in.
  ///
  /// @param[in]  name  The name of the trace event.
  void FlutterEngineTraceEventDurationEnd(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _FlutterEngineTraceEventDurationEnd(
      name,
    );
  }

  late final _FlutterEngineTraceEventDurationEndPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'FlutterEngineTraceEventDurationEnd');
  late final _FlutterEngineTraceEventDurationEnd =
      _FlutterEngineTraceEventDurationEndPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>)>();

  /// -----------------------------------------------------------------------------
  /// @brief      A profiling utility. Logs a trace duration instant event to the
  /// timeline. If the timeline is unavailable or disabled, this has
  /// no effect. Can be called on any thread. Strings passed into the
  /// function will NOT be copied when added to the timeline. Only
  /// string literals may be passed in.
  ///
  /// @param[in]  name  The name of the trace event.
  void FlutterEngineTraceEventInstant(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _FlutterEngineTraceEventInstant(
      name,
    );
  }

  late final _FlutterEngineTraceEventInstantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'FlutterEngineTraceEventInstant');
  late final _FlutterEngineTraceEventInstant =
      _FlutterEngineTraceEventInstantPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Posts a task onto the Flutter render thread. Typically, this may
  /// be called from any thread as long as a `FlutterEngineShutdown`
  /// on the specific engine has not already been initiated.
  ///
  /// @param[in]  engine         A running engine instance.
  /// @param[in]  callback       The callback to execute on the render thread.
  /// @param      callback_data  The callback context.
  ///
  /// @return     The result of the call.
  int FlutterEnginePostRenderThreadTask(
    FlutterEngine engine,
    VoidCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    return _FlutterEnginePostRenderThreadTask(
      engine,
      callback,
      callback_data,
    );
  }

  late final _FlutterEnginePostRenderThreadTaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(FlutterEngine, VoidCallback,
              ffi.Pointer<ffi.Void>)>>('FlutterEnginePostRenderThreadTask');
  late final _FlutterEnginePostRenderThreadTask =
      _FlutterEnginePostRenderThreadTaskPtr.asFunction<
          int Function(FlutterEngine, VoidCallback, ffi.Pointer<ffi.Void>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Get the current time in nanoseconds from the clock used by the
  /// flutter engine. This is the system monotonic clock.
  ///
  /// @return     The current time in nanoseconds.
  int FlutterEngineGetCurrentTime() {
    return _FlutterEngineGetCurrentTime();
  }

  late final _FlutterEngineGetCurrentTimePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'FlutterEngineGetCurrentTime');
  late final _FlutterEngineGetCurrentTime =
      _FlutterEngineGetCurrentTimePtr.asFunction<int Function()>();

  /// ------------------------------------------------------------------------------
  /// @brief      Inform the engine to run the specified task. This task has been
  /// given to the engine via the
  /// `FlutterTaskRunnerDescription.post_task_callback`. This call
  /// must only be made at the target time specified in that callback.
  /// Running the task before that time is undefined behavior.
  ///
  /// @param[in]  engine     A running engine instance.
  /// @param[in]  task       the task handle.
  ///
  /// @return     The result of the call.
  int FlutterEngineRunTask(
    FlutterEngine engine,
    ffi.Pointer<FlutterTask> task,
  ) {
    return _FlutterEngineRunTask(
      engine,
      task,
    );
  }

  late final _FlutterEngineRunTaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(FlutterEngine,
              ffi.Pointer<FlutterTask>)>>('FlutterEngineRunTask');
  late final _FlutterEngineRunTask = _FlutterEngineRunTaskPtr.asFunction<
      int Function(FlutterEngine, ffi.Pointer<FlutterTask>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Notify a running engine instance that the locale has been
  /// updated. The preferred locale must be the first item in the list
  /// of locales supplied. The other entries will be used as a
  /// fallback.
  ///
  /// @param[in]  engine         A running engine instance.
  /// @param[in]  locales        The updated locales in the order of preference.
  /// @param[in]  locales_count  The count of locales supplied.
  ///
  /// @return     Whether the locale updates were applied.
  int FlutterEngineUpdateLocales(
    FlutterEngine engine,
    ffi.Pointer<ffi.Pointer<FlutterLocale>> locales,
    int locales_count,
  ) {
    return _FlutterEngineUpdateLocales(
      engine,
      locales,
      locales_count,
    );
  }

  late final _FlutterEngineUpdateLocalesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FlutterEngine,
              ffi.Pointer<ffi.Pointer<FlutterLocale>>,
              ffi.Size)>>('FlutterEngineUpdateLocales');
  late final _FlutterEngineUpdateLocales =
      _FlutterEngineUpdateLocalesPtr.asFunction<
          int Function(
              FlutterEngine, ffi.Pointer<ffi.Pointer<FlutterLocale>>, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Returns if the Flutter engine instance will run AOT compiled
  /// Dart code. This call has no threading restrictions.
  ///
  /// For embedder code that is configured for both AOT and JIT mode
  /// Dart execution based on the Flutter engine being linked to, this
  /// runtime check may be used to appropriately configure the
  /// `FlutterProjectArgs`. In JIT mode execution, the kernel
  /// snapshots must be present in the Flutter assets directory
  /// specified in the `FlutterProjectArgs`. For AOT execution, the
  /// fields `vm_snapshot_data`, `vm_snapshot_instructions`,
  /// `isolate_snapshot_data` and `isolate_snapshot_instructions`
  /// (along with their size fields) must be specified in
  /// `FlutterProjectArgs`.
  ///
  /// @return     True, if AOT Dart code is run. JIT otherwise.
  bool FlutterEngineRunsAOTCompiledDartCode() {
    return _FlutterEngineRunsAOTCompiledDartCode();
  }

  late final _FlutterEngineRunsAOTCompiledDartCodePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'FlutterEngineRunsAOTCompiledDartCode');
  late final _FlutterEngineRunsAOTCompiledDartCode =
      _FlutterEngineRunsAOTCompiledDartCodePtr.asFunction<bool Function()>();

  /// ------------------------------------------------------------------------------
  /// @brief      Posts a Dart object to specified send port. The corresponding
  /// receive port for send port can be in any isolate running in the
  /// VM. This isolate can also be the root isolate for an
  /// unrelated engine. The engine parameter is necessary only to
  /// ensure the call is not made when no engine (and hence no VM) is
  /// running.
  ///
  /// Unlike the platform messages mechanism, there are no threading
  /// restrictions when using this API. Message can be posted on any
  /// thread and they will be made available to isolate on which the
  /// corresponding send port is listening.
  ///
  /// However, it is the embedders responsibility to ensure that the
  /// call is not made during an ongoing call the
  /// `FlutterEngineDeinitialize` or `FlutterEngineShutdown` on
  /// another thread.
  ///
  /// @param[in]  engine     A running engine instance.
  /// @param[in]  port       The send port to send the object to.
  /// @param[in]  object     The object to send to the isolate with the
  /// corresponding receive port.
  ///
  /// @return     If the message was posted to the send port.
  int FlutterEnginePostDartObject(
    FlutterEngine engine,
    int port,
    ffi.Pointer<FlutterEngineDartObject> object,
  ) {
    return _FlutterEnginePostDartObject(
      engine,
      port,
      object,
    );
  }

  late final _FlutterEnginePostDartObjectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(FlutterEngine, FlutterEngineDartPort,
                  ffi.Pointer<FlutterEngineDartObject>)>>(
      'FlutterEnginePostDartObject');
  late final _FlutterEnginePostDartObject =
      _FlutterEnginePostDartObjectPtr.asFunction<
          int Function(
              FlutterEngine, int, ffi.Pointer<FlutterEngineDartObject>)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Posts a low memory notification to a running engine instance.
  /// The engine will do its best to release non-critical resources in
  /// response. It is not guaranteed that the resource would have been
  /// collected by the time this call returns however. The
  /// notification is posted to engine subsystems that may be
  /// operating on other threads.
  ///
  /// Flutter applications can respond to these notifications by
  /// setting `WidgetsBindingObserver.didHaveMemoryPressure`
  /// observers.
  ///
  /// @param[in]  engine     A running engine instance.
  ///
  /// @return     If the low memory notification was sent to the running engine
  /// instance.
  int FlutterEngineNotifyLowMemoryWarning(
    FlutterEngine engine,
  ) {
    return _FlutterEngineNotifyLowMemoryWarning(
      engine,
    );
  }

  late final _FlutterEngineNotifyLowMemoryWarningPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineNotifyLowMemoryWarning');
  late final _FlutterEngineNotifyLowMemoryWarning =
      _FlutterEngineNotifyLowMemoryWarningPtr.asFunction<
          int Function(FlutterEngine)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Schedule a callback to be run on all engine managed threads.
  /// The engine will attempt to service this callback the next time
  /// the message loop for each managed thread is idle. Since the
  /// engine manages the entire lifecycle of multiple threads, there
  /// is no opportunity for the embedders to finely tune the
  /// priorities of threads directly, or, perform other thread
  /// specific configuration (for example, setting thread names for
  /// tracing). This callback gives embedders a chance to affect such
  /// tuning.
  ///
  /// @attention  This call is expensive and must be made as few times as
  /// possible. The callback must also return immediately as not doing
  /// so may risk performance issues (especially for callbacks of type
  /// kFlutterNativeThreadTypeUI and kFlutterNativeThreadTypeRender).
  ///
  /// @attention  Some callbacks (especially the ones of type
  /// kFlutterNativeThreadTypeWorker) may be called after the
  /// FlutterEngine instance has shut down. Embedders must be careful
  /// in handling the lifecycle of objects associated with the user
  /// data baton.
  ///
  /// @attention  In case there are multiple running Flutter engine instances,
  /// their workers are shared.
  ///
  /// @param[in]  engine     A running engine instance.
  /// @param[in]  callback   The callback that will get called multiple times on
  /// each engine managed thread.
  /// @param[in]  user_data  A baton passed by the engine to the callback. This
  /// baton is not interpreted by the engine in any way.
  ///
  /// @return     Returns if the callback was successfully posted to all threads.
  int FlutterEnginePostCallbackOnAllNativeThreads(
    FlutterEngine engine,
    FlutterNativeThreadCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _FlutterEnginePostCallbackOnAllNativeThreads(
      engine,
      callback,
      user_data,
    );
  }

  late final _FlutterEnginePostCallbackOnAllNativeThreadsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(FlutterEngine, FlutterNativeThreadCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'FlutterEnginePostCallbackOnAllNativeThreads');
  late final _FlutterEnginePostCallbackOnAllNativeThreads =
      _FlutterEnginePostCallbackOnAllNativeThreadsPtr.asFunction<
          int Function(FlutterEngine, FlutterNativeThreadCallback,
              ffi.Pointer<ffi.Void>)>();

  /// ------------------------------------------------------------------------------
  /// @brief    Posts updates corresponding to display changes to a running engine
  /// instance.
  ///
  /// @param[in] update_type      The type of update pushed to the engine.
  /// @param[in] displays         The displays affected by this update.
  /// @param[in] display_count    Size of the displays array, must be at least 1.
  ///
  /// @return the result of the call made to the engine.
  int FlutterEngineNotifyDisplayUpdate(
    FlutterEngine engine,
    int update_type,
    ffi.Pointer<FlutterEngineDisplay> displays,
    int display_count,
  ) {
    return _FlutterEngineNotifyDisplayUpdate(
      engine,
      update_type,
      displays,
      display_count,
    );
  }

  late final _FlutterEngineNotifyDisplayUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FlutterEngine,
              ffi.Int32,
              ffi.Pointer<FlutterEngineDisplay>,
              ffi.Size)>>('FlutterEngineNotifyDisplayUpdate');
  late final _FlutterEngineNotifyDisplayUpdate =
      _FlutterEngineNotifyDisplayUpdatePtr.asFunction<
          int Function(
              FlutterEngine, int, ffi.Pointer<FlutterEngineDisplay>, int)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Schedule a new frame to redraw the content.
  ///
  /// @param[in]  engine     A running engine instance.
  ///
  /// @return the result of the call made to the engine.
  int FlutterEngineScheduleFrame(
    FlutterEngine engine,
  ) {
    return _FlutterEngineScheduleFrame(
      engine,
    );
  }

  late final _FlutterEngineScheduleFramePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>(
          'FlutterEngineScheduleFrame');
  late final _FlutterEngineScheduleFrame =
      _FlutterEngineScheduleFramePtr.asFunction<int Function(FlutterEngine)>();

  /// ------------------------------------------------------------------------------
  /// @brief      Gets the table of engine function pointers.
  ///
  /// @param[out] table   The table to fill with pointers. This should be
  /// zero-initialized, except for struct_size.
  ///
  /// @return     Returns whether the table was successfully populated.
  int FlutterEngineGetProcAddresses(
    ffi.Pointer<FlutterEngineProcTable> table,
  ) {
    return _FlutterEngineGetProcAddresses(
      table,
    );
  }

  late final _FlutterEngineGetProcAddressesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FlutterEngineProcTable>)>>(
      'FlutterEngineGetProcAddresses');
  late final _FlutterEngineGetProcAddresses = _FlutterEngineGetProcAddressesPtr
      .asFunction<int Function(ffi.Pointer<FlutterEngineProcTable>)>();
}

abstract class FlutterEngineResult {
  static const int kSuccess = 0;
  static const int kInvalidLibraryVersion = 1;
  static const int kInvalidArguments = 2;
  static const int kInternalInconsistency = 3;
}

abstract class FlutterRendererType {
  static const int kOpenGL = 0;
  static const int kSoftware = 1;

  /// Metal is only supported on Darwin platforms (macOS / iOS).
  /// iOS version >= 10.0 (device), 13.0 (simulator)
  /// macOS version >= 10.14
  static const int kMetal = 2;
  static const int kVulkan = 3;
}

/// Additional accessibility features that may be enabled by the platform.
/// Must match the `AccessibilityFeatures` enum in window.dart.
abstract class FlutterAccessibilityFeature {
  /// Indicate there is a running accessibility service which is changing the
  /// interaction model of the device.
  static const int kFlutterAccessibilityFeatureAccessibleNavigation = 1;

  /// Indicate the platform is inverting the colors of the application.
  static const int kFlutterAccessibilityFeatureInvertColors = 2;

  /// Request that animations be disabled or simplified.
  static const int kFlutterAccessibilityFeatureDisableAnimations = 4;

  /// Request that text be rendered at a bold font weight.
  static const int kFlutterAccessibilityFeatureBoldText = 8;

  /// Request that certain animations be simplified and parallax effects
  /// removed.
  static const int kFlutterAccessibilityFeatureReduceMotion = 16;

  /// Request that UI be rendered with darker colors.
  static const int kFlutterAccessibilityFeatureHighContrast = 32;

  /// Request to show on/off labels inside switches.
  static const int kFlutterAccessibilityFeatureOnOffSwitchLabels = 64;
}

/// The set of possible actions that can be conveyed to a semantics node.
///
/// Must match the `SemanticsAction` enum in semantics.dart.
abstract class FlutterSemanticsAction {
  /// The equivalent of a user briefly tapping the screen with the finger
  /// without moving it.
  static const int kFlutterSemanticsActionTap = 1;

  /// The equivalent of a user pressing and holding the screen with the finger
  /// for a few seconds without moving it.
  static const int kFlutterSemanticsActionLongPress = 2;

  /// The equivalent of a user moving their finger across the screen from right
  /// to left.
  static const int kFlutterSemanticsActionScrollLeft = 4;

  /// The equivalent of a user moving their finger across the screen from left
  /// to
  /// right.
  static const int kFlutterSemanticsActionScrollRight = 8;

  /// The equivalent of a user moving their finger across the screen from bottom
  /// to top.
  static const int kFlutterSemanticsActionScrollUp = 16;

  /// The equivalent of a user moving their finger across the screen from top to
  /// bottom.
  static const int kFlutterSemanticsActionScrollDown = 32;

  /// Increase the value represented by the semantics node.
  static const int kFlutterSemanticsActionIncrease = 64;

  /// Decrease the value represented by the semantics node.
  static const int kFlutterSemanticsActionDecrease = 128;

  /// A request to fully show the semantics node on screen.
  static const int kFlutterSemanticsActionShowOnScreen = 256;

  /// Move the cursor forward by one character.
  static const int kFlutterSemanticsActionMoveCursorForwardByCharacter = 512;

  /// Move the cursor backward by one character.
  static const int kFlutterSemanticsActionMoveCursorBackwardByCharacter = 1024;

  /// Set the text selection to the given range.
  static const int kFlutterSemanticsActionSetSelection = 2048;

  /// Copy the current selection to the clipboard.
  static const int kFlutterSemanticsActionCopy = 4096;

  /// Cut the current selection and place it in the clipboard.
  static const int kFlutterSemanticsActionCut = 8192;

  /// Paste the current content of the clipboard.
  static const int kFlutterSemanticsActionPaste = 16384;

  /// Indicate that the node has gained accessibility focus.
  static const int kFlutterSemanticsActionDidGainAccessibilityFocus = 32768;

  /// Indicate that the node has lost accessibility focus.
  static const int kFlutterSemanticsActionDidLoseAccessibilityFocus = 65536;

  /// Indicate that the user has invoked a custom accessibility action.
  static const int kFlutterSemanticsActionCustomAction = 131072;

  /// A request that the node should be dismissed.
  static const int kFlutterSemanticsActionDismiss = 262144;

  /// Move the cursor forward by one word.
  static const int kFlutterSemanticsActionMoveCursorForwardByWord = 524288;

  /// Move the cursor backward by one word.
  static const int kFlutterSemanticsActionMoveCursorBackwardByWord = 1048576;

  /// Replace the current text in the text field.
  static const int kFlutterSemanticsActionSetText = 2097152;
}

/// The set of properties that may be associated with a semantics node.
///
/// Must match the `SemanticsFlag` enum in semantics.dart.
abstract class FlutterSemanticsFlag {
  /// The semantics node has the quality of either being "checked" or
  /// "unchecked".
  static const int kFlutterSemanticsFlagHasCheckedState = 1;

  /// Whether a semantics node is checked.
  static const int kFlutterSemanticsFlagIsChecked = 2;

  /// Whether a semantics node is selected.
  static const int kFlutterSemanticsFlagIsSelected = 4;

  /// Whether the semantic node represents a button.
  static const int kFlutterSemanticsFlagIsButton = 8;

  /// Whether the semantic node represents a text field.
  static const int kFlutterSemanticsFlagIsTextField = 16;

  /// Whether the semantic node currently holds the user's focus.
  static const int kFlutterSemanticsFlagIsFocused = 32;

  /// The semantics node has the quality of either being "enabled" or
  /// "disabled".
  static const int kFlutterSemanticsFlagHasEnabledState = 64;

  /// Whether a semantic node that hasEnabledState is currently enabled.
  static const int kFlutterSemanticsFlagIsEnabled = 128;

  /// Whether a semantic node is in a mutually exclusive group.
  static const int kFlutterSemanticsFlagIsInMutuallyExclusiveGroup = 256;

  /// Whether a semantic node is a header that divides content into sections.
  static const int kFlutterSemanticsFlagIsHeader = 512;

  /// Whether the value of the semantics node is obscured.
  static const int kFlutterSemanticsFlagIsObscured = 1024;

  /// Whether the semantics node is the root of a subtree for which a route name
  /// should be announced.
  static const int kFlutterSemanticsFlagScopesRoute = 2048;

  /// Whether the semantics node label is the name of a visually distinct route.
  static const int kFlutterSemanticsFlagNamesRoute = 4096;

  /// Whether the semantics node is considered hidden.
  static const int kFlutterSemanticsFlagIsHidden = 8192;

  /// Whether the semantics node represents an image.
  static const int kFlutterSemanticsFlagIsImage = 16384;

  /// Whether the semantics node is a live region.
  static const int kFlutterSemanticsFlagIsLiveRegion = 32768;

  /// The semantics node has the quality of either being "on" or "off".
  static const int kFlutterSemanticsFlagHasToggledState = 65536;

  /// If true, the semantics node is "on". If false, the semantics node is
  /// "off".
  static const int kFlutterSemanticsFlagIsToggled = 131072;

  /// Whether the platform can scroll the semantics node when the user attempts
  /// to move the accessibility focus to an offscreen child.
  ///
  /// For example, a `ListView` widget has implicit scrolling so that users can
  /// easily move the accessibility focus to the next set of children. A
  /// `PageView` widget does not have implicit scrolling, so that users don't
  /// navigate to the next page when reaching the end of the current one.
  static const int kFlutterSemanticsFlagHasImplicitScrolling = 262144;

  /// Whether the value of the semantics node is coming from a multi-line text
  /// field.
  ///
  /// This is used for text fields to distinguish single-line text fields from
  /// multi-line ones.
  static const int kFlutterSemanticsFlagIsMultiline = 524288;

  /// Whether the semantic node is read only.
  ///
  /// Only applicable when kFlutterSemanticsFlagIsTextField flag is on.
  static const int kFlutterSemanticsFlagIsReadOnly = 1048576;

  /// Whether the semantic node can hold the user's focus.
  static const int kFlutterSemanticsFlagIsFocusable = 2097152;

  /// Whether the semantics node represents a link.
  static const int kFlutterSemanticsFlagIsLink = 4194304;

  /// Whether the semantics node represents a slider.
  static const int kFlutterSemanticsFlagIsSlider = 8388608;

  /// Whether the semantics node represents a keyboard key.
  static const int kFlutterSemanticsFlagIsKeyboardKey = 16777216;
}

abstract class FlutterTextDirection {
  /// Text has unknown text direction.
  static const int kFlutterTextDirectionUnknown = 0;

  /// Text is read from right to left.
  static const int kFlutterTextDirectionRTL = 1;

  /// Text is read from left to right.
  static const int kFlutterTextDirectionLTR = 2;
}

/// Valid values for priority of Thread.
abstract class FlutterThreadPriority {
  /// Suitable for threads that shouldn't disrupt high priority work.
  static const int kBackground = 0;

  /// Default priority level.
  static const int kNormal = 1;

  /// Suitable for threads which generate data for the display.
  static const int kDisplay = 2;

  /// Suitable for thread which raster data.
  static const int kRaster = 3;
}

class _FlutterEngine extends ffi.Opaque {}

class FlutterTransformation extends ffi.Struct {
  /// horizontal scale factor
  @ffi.Double()
  external double scaleX;

  /// horizontal skew factor
  @ffi.Double()
  external double skewX;

  /// horizontal translation
  @ffi.Double()
  external double transX;

  /// vertical skew factor
  @ffi.Double()
  external double skewY;

  /// vertical scale factor
  @ffi.Double()
  external double scaleY;

  /// vertical translation
  @ffi.Double()
  external double transY;

  /// input x-axis perspective factor
  @ffi.Double()
  external double pers0;

  /// input y-axis perspective factor
  @ffi.Double()
  external double pers1;

  /// perspective scale factor
  @ffi.Double()
  external double pers2;
}

abstract class FlutterOpenGLTargetType {
  /// Specifies an OpenGL texture target type. Textures are specified using
  /// the FlutterOpenGLTexture struct.
  static const int kFlutterOpenGLTargetTypeTexture = 0;

  /// Specifies an OpenGL frame-buffer target type. Framebuffers are specified
  /// using the FlutterOpenGLFramebuffer struct.
  static const int kFlutterOpenGLTargetTypeFramebuffer = 1;
}

class FlutterOpenGLTexture extends ffi.Struct {
  /// Target texture of the active texture unit (example GL_TEXTURE_2D or
  /// GL_TEXTURE_RECTANGLE).
  @ffi.Uint32()
  external int target;

  /// The name of the texture.
  @ffi.Uint32()
  external int name;

  /// The texture format (example GL_RGBA8).
  @ffi.Uint32()
  external int format;

  /// User data to be returned on the invocation of the destruction callback.
  external ffi.Pointer<ffi.Void> user_data;

  /// Callback invoked (on an engine managed thread) that asks the embedder to
  /// collect the texture.
  external VoidCallback destruction_callback;

  /// Optional parameters for texture height/width, default is 0, non-zero means
  /// the texture has the specified width/height. Usually, when the texture type
  /// is GL_TEXTURE_RECTANGLE, we need to specify the texture width/height to
  /// tell the embedder to scale when rendering.
  /// Width of the texture.
  @ffi.Size()
  external int width;

  /// Height of the texture.
  @ffi.Size()
  external int height;
}

typedef VoidCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

class FlutterOpenGLFramebuffer extends ffi.Struct {
  /// The target of the color attachment of the frame-buffer. For example,
  /// GL_TEXTURE_2D or GL_RENDERBUFFER. In case of ambiguity when dealing with
  /// Window bound frame-buffers, 0 may be used.
  @ffi.Uint32()
  external int target;

  /// The name of the framebuffer.
  @ffi.Uint32()
  external int name;

  /// User data to be returned on the invocation of the destruction callback.
  external ffi.Pointer<ffi.Void> user_data;

  /// Callback invoked (on an engine managed thread) that asks the embedder to
  /// collect the framebuffer.
  external VoidCallback destruction_callback;
}

/// A structure to represent the width and height.
class FlutterSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// A structure to represent the width and height.
///
/// See: \ref FlutterSize when the value are not integers.
class FlutterUIntSize extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

/// A structure to represent a rectangle.
class FlutterRect extends ffi.Struct {
  @ffi.Double()
  external double left;

  @ffi.Double()
  external double top;

  @ffi.Double()
  external double right;

  @ffi.Double()
  external double bottom;
}

/// A structure to represent a 2D point.
class FlutterPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

/// A structure to represent a rounded rectangle.
class FlutterRoundedRect extends ffi.Struct {
  external FlutterRect rect;

  external FlutterSize upper_left_corner_radius;

  external FlutterSize upper_right_corner_radius;

  external FlutterSize lower_right_corner_radius;

  external FlutterSize lower_left_corner_radius;
}

/// This information is passed to the embedder when requesting a frame buffer
/// object.
///
/// See: \ref FlutterOpenGLRendererConfig.fbo_with_frame_info_callback.
class FlutterFrameInfo extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterFrameInfo).
  @ffi.Size()
  external int struct_size;

  /// The size of the surface that will be backed by the fbo.
  external FlutterUIntSize size;
}

/// This information is passed to the embedder when a surface is presented.
///
/// See: \ref FlutterOpenGLRendererConfig.present_with_info.
class FlutterPresentInfo extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterPresentInfo).
  @ffi.Size()
  external int struct_size;

  /// Id of the fbo backing the surface that was presented.
  @ffi.Uint32()
  external int fbo_id;
}

class FlutterOpenGLRendererConfig extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterOpenGLRendererConfig).
  @ffi.Size()
  external int struct_size;

  external BoolCallback make_current;

  external BoolCallback clear_current;

  /// Specifying one (and only one) of `present` or `present_with_info` is
  /// required. Specifying both is an error and engine initialization will be
  /// terminated. The return value indicates success of the present call.
  external BoolCallback present;

  /// Specifying one (and only one) of the `fbo_callback` or
  /// `fbo_with_frame_info_callback` is required. Specifying both is an error
  /// and engine intialization will be terminated. The return value indicates
  /// the id of the frame buffer object that flutter will obtain the gl surface
  /// from.
  external UIntCallback fbo_callback;

  /// This is an optional callback. Flutter will ask the emebdder to create a GL
  /// context current on a background thread. If the embedder is able to do so,
  /// Flutter will assume that this context is in the same sharegroup as the
  /// main rendering context and use this context for asynchronous texture
  /// uploads. Though optional, it is recommended that all embedders set this
  /// callback as it will lead to better performance in texture handling.
  external BoolCallback make_resource_current;

  /// By default, the renderer config assumes that the FBO does not change for
  /// the duration of the engine run. If this argument is true, the
  /// engine will ask the embedder for an updated FBO target (via an
  /// fbo_callback invocation) after a present call.
  @ffi.Bool()
  external bool fbo_reset_after_present;

  /// The transformation to apply to the render target before any rendering
  /// operations. This callback is optional.
  /// @attention      When using a custom compositor, the layer offset and sizes
  /// will be affected by this transformation. It will be
  /// embedder responsibility to render contents at the
  /// transformed offset and size. This is useful for embedders
  /// that want to render transformed contents directly into
  /// hardware overlay planes without having to apply extra
  /// transformations to layer contents (which may necessitate
  /// an expensive off-screen render pass).
  external TransformationCallback surface_transformation;

  external ProcResolver gl_proc_resolver;

  /// When the embedder specifies that a texture has a frame available, the
  /// engine will call this method (on an internal engine managed thread) so
  /// that external texture details can be supplied to the engine for subsequent
  /// composition.
  external TextureFrameCallback gl_external_texture_frame_callback;

  /// Specifying one (and only one) of the `fbo_callback` or
  /// `fbo_with_frame_info_callback` is required. Specifying both is an error
  /// and engine intialization will be terminated. The return value indicates
  /// the id of the frame buffer object (fbo) that flutter will obtain the gl
  /// surface from. When using this variant, the embedder is passed a
  /// `FlutterFrameInfo` struct that indicates the properties of the surface
  /// that flutter will acquire from the returned fbo.
  external UIntFrameInfoCallback fbo_with_frame_info_callback;

  /// Specifying one (and only one) of `present` or `present_with_info` is
  /// required. Specifying both is an error and engine initialization will be
  /// terminated. When using this variant, the embedder is passed a
  /// `FlutterPresentInfo` struct that the embedder can use to release any
  /// resources. The return value indicates success of the present call.
  external BoolPresentInfoCallback present_with_info;
}

typedef BoolCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>;
typedef UIntCallback = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>;
typedef TransformationCallback = ffi.Pointer<
    ffi.NativeFunction<FlutterTransformation Function(ffi.Pointer<ffi.Void>)>>;
typedef ProcResolver = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>;
typedef TextureFrameCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Size, ffi.Size,
            ffi.Pointer<FlutterOpenGLTexture>)>>;

/// Callback for when a frame buffer object is requested.
typedef UIntFrameInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint32 Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterFrameInfo>)>>;

/// Callback for when a surface is presented.
typedef BoolPresentInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterPresentInfo>)>>;

/// Pixel format for the external texture.
abstract class FlutterMetalExternalTexturePixelFormat {
  static const int kYUVA = 0;
  static const int kRGBA = 1;
}

class FlutterMetalExternalTexture extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterMetalExternalTexture).
  @ffi.Size()
  external int struct_size;

  /// Height of the texture.
  @ffi.Size()
  external int width;

  /// Height of the texture.
  @ffi.Size()
  external int height;

  /// The pixel format type of the external.
  @ffi.Int32()
  external int pixel_format;

  /// Represents the size of the `textures` array.
  @ffi.Size()
  external int num_textures;

  /// Supported textures are YUVA and RGBA, in case of YUVA we expect 2 texture
  /// handles to be provided by the embedder, Y first and UV next. In case of
  /// RGBA only one should be passed.
  /// These are individually aliases for id<MTLTexture>. These textures are
  /// retained by the engine for the period of the composition. Once these
  /// textures have been unregistered via the
  /// `FlutterEngineUnregisterExternalTexture`, the embedder has to release
  /// these textures.
  external ffi.Pointer<FlutterMetalTextureHandle> textures;
}

/// Alias for id<MTLTexture>.
typedef FlutterMetalTextureHandle = ffi.Pointer<ffi.Void>;

class FlutterMetalTexture extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterMetalTexture).
  @ffi.Size()
  external int struct_size;

  /// Embedder provided unique identifier to the texture buffer. Given that the
  /// `texture` handle is passed to the engine to render to, the texture buffer
  /// is itself owned by the embedder. This `texture_id` is then also given to
  /// the embedder in the present callback.
  @ffi.Int64()
  external int texture_id;

  /// Handle to the MTLTexture that is owned by the embedder. Engine will render
  /// the frame into this texture.
  external FlutterMetalTextureHandle texture;

  /// A baton that is not interpreted by the engine in any way. It will be given
  /// back to the embedder in the destruction callback below. Embedder resources
  /// may be associated with this baton.
  external ffi.Pointer<ffi.Void> user_data;

  /// The callback invoked by the engine when it no longer needs this backing
  /// store.
  external VoidCallback destruction_callback;
}

class FlutterMetalRendererConfig extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterMetalRendererConfig).
  @ffi.Size()
  external int struct_size;

  /// Alias for id<MTLDevice>.
  external FlutterMetalDeviceHandle device;

  /// Alias for id<MTLCommandQueue>.
  external FlutterMetalCommandQueueHandle present_command_queue;

  /// The callback that gets invoked when the engine requests the embedder for a
  /// texture to render to.
  external FlutterMetalTextureCallback get_next_drawable_callback;

  /// The callback presented to the embedder to present a fully populated metal
  /// texture to the user.
  external FlutterMetalPresentCallback present_drawable_callback;

  /// When the embedder specifies that a texture has a frame available, the
  /// engine will call this method (on an internal engine managed thread) so
  /// that external texture details can be supplied to the engine for subsequent
  /// composition.
  external FlutterMetalTextureFrameCallback external_texture_frame_callback;
}

/// Alias for id<MTLDevice>.
typedef FlutterMetalDeviceHandle = ffi.Pointer<ffi.Void>;

/// Alias for id<MTLCommandQueue>.
typedef FlutterMetalCommandQueueHandle = ffi.Pointer<ffi.Void>;

/// Callback for when a metal texture is requested.
typedef FlutterMetalTextureCallback = ffi.Pointer<
    ffi.NativeFunction<
        FlutterMetalTexture Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterFrameInfo>)>>;

/// Callback for when a metal texture is presented. The texture_id here
/// corresponds to the texture_id provided by the embedder in the
/// `FlutterMetalTextureCallback` callback.
typedef FlutterMetalPresentCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterMetalTexture>)>>;

/// Callback to provide an external texture for a given texture_id.
/// See: external_texture_frame_callback.
typedef FlutterMetalTextureFrameCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Size, ffi.Size,
            ffi.Pointer<FlutterMetalExternalTexture>)>>;

class FlutterVulkanImage extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterVulkanImage).
  @ffi.Size()
  external int struct_size;

  /// Handle to the VkImage that is owned by the embedder. The engine will
  /// bind this image for writing the frame.
  @FlutterVulkanImageHandle()
  external int image;

  /// The VkFormat of the image (for example: VK_FORMAT_R8G8B8A8_UNORM).
  @ffi.Uint32()
  external int format;
}

/// Alias for VkImage.
typedef FlutterVulkanImageHandle = ffi.Uint64;

class FlutterVulkanRendererConfig extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterVulkanRendererConfig).
  @ffi.Size()
  external int struct_size;

  /// The Vulkan API version. This should match the value set in
  /// VkApplicationInfo::apiVersion when the VkInstance was created.
  @ffi.Uint32()
  external int version;

  /// VkInstance handle. Must not be destroyed before `FlutterEngineShutdown` is
  /// called.
  external FlutterVulkanInstanceHandle instance;

  /// VkPhysicalDevice handle.
  external FlutterVulkanPhysicalDeviceHandle physical_device;

  /// VkDevice handle. Must not be destroyed before `FlutterEngineShutdown` is
  /// called.
  external FlutterVulkanDeviceHandle device;

  /// The queue family index of the VkQueue supplied in the next field.
  @ffi.Uint32()
  external int queue_family_index;

  /// VkQueue handle.
  external FlutterVulkanQueueHandle queue;

  /// The number of instance extensions available for enumerating in the next
  /// field.
  @ffi.Size()
  external int enabled_instance_extension_count;

  /// Array of enabled instance extension names. This should match the names
  /// passed to `VkInstanceCreateInfo.ppEnabledExtensionNames` when the instance
  /// was created, but any subset of enabled instance extensions may be
  /// specified.
  /// This field is optional; `nullptr` may be specified.
  /// This memory is only accessed during the call to FlutterEngineInitialize.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> enabled_instance_extensions;

  /// The number of device extensions available for enumerating in the next
  /// field.
  @ffi.Size()
  external int enabled_device_extension_count;

  /// Array of enabled logical device extension names. This should match the
  /// names passed to `VkDeviceCreateInfo.ppEnabledExtensionNames` when the
  /// logical device was created, but any subset of enabled logical device
  /// extensions may be specified.
  /// This field is optional; `nullptr` may be specified.
  /// This memory is only accessed during the call to FlutterEngineInitialize.
  /// For example: VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME
  external ffi.Pointer<ffi.Pointer<ffi.Char>> enabled_device_extensions;

  /// The callback invoked when resolving Vulkan function pointers.
  external FlutterVulkanInstanceProcAddressCallback
      get_instance_proc_address_callback;

  /// The callback invoked when the engine requests a VkImage from the embedder
  /// for rendering the next frame.
  /// Not used if a FlutterCompositor is supplied in FlutterProjectArgs.
  external FlutterVulkanImageCallback get_next_image_callback;

  /// The callback invoked when a VkImage has been written to and is ready for
  /// use by the embedder. Prior to calling this callback, the engine performs
  /// a host sync, and so the VkImage can be used in a pipeline by the embedder
  /// without any additional synchronization.
  /// Not used if a FlutterCompositor is supplied in FlutterProjectArgs.
  external FlutterVulkanPresentCallback present_image_callback;
}

/// Alias for VkInstance.
typedef FlutterVulkanInstanceHandle = ffi.Pointer<ffi.Void>;

/// Alias for VkPhysicalDevice.
typedef FlutterVulkanPhysicalDeviceHandle = ffi.Pointer<ffi.Void>;

/// Alias for VkDevice.
typedef FlutterVulkanDeviceHandle = ffi.Pointer<ffi.Void>;

/// Alias for VkQueue.
typedef FlutterVulkanQueueHandle = ffi.Pointer<ffi.Void>;

/// Callback to fetch a Vulkan function pointer for a given instance. Normally,
/// this should return the results of vkGetInstanceProcAddr.
typedef FlutterVulkanInstanceProcAddressCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
            FlutterVulkanInstanceHandle, ffi.Pointer<ffi.Char>)>>;

/// Callback for when a VkImage is requested.
typedef FlutterVulkanImageCallback = ffi.Pointer<
    ffi.NativeFunction<
        FlutterVulkanImage Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterFrameInfo>)>>;

/// Callback for when a VkImage has been written to and is ready for use by the
/// embedder.
typedef FlutterVulkanPresentCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<FlutterVulkanImage>)>>;

class FlutterSoftwareRendererConfig extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterSoftwareRendererConfig).
  @ffi.Size()
  external int struct_size;

  /// The callback presented to the embedder to present a fully populated buffer
  /// to the user. The pixel format of the buffer is the native 32-bit RGBA
  /// format. The buffer is owned by the Flutter engine and must be copied in
  /// this callback if needed.
  external SoftwareSurfacePresentCallback surface_present_callback;
}

typedef SoftwareSurfacePresentCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>;

class FlutterRendererConfig extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class FlutterWindowMetricsEvent extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterWindowMetricsEvent).
  @ffi.Size()
  external int struct_size;

  /// Physical width of the window.
  @ffi.Size()
  external int width;

  /// Physical height of the window.
  @ffi.Size()
  external int height;

  /// Scale factor for the physical screen.
  @ffi.Double()
  external double pixel_ratio;

  /// Horizontal physical location of the left side of the window on the screen.
  @ffi.Size()
  external int left;

  /// Vertical physical location of the top of the window on the screen.
  @ffi.Size()
  external int top;

  /// Top inset of window.
  @ffi.Double()
  external double physical_view_inset_top;

  /// Right inset of window.
  @ffi.Double()
  external double physical_view_inset_right;

  /// Bottom inset of window.
  @ffi.Double()
  external double physical_view_inset_bottom;

  /// Left inset of window.
  @ffi.Double()
  external double physical_view_inset_left;
}

/// The phase of the pointer event.
abstract class FlutterPointerPhase {
  static const int kCancel = 0;

  /// The pointer, which must have been down (see kDown), is now up.
  ///
  /// For touch, this means that the pointer is no longer in contact with the
  /// screen. For a mouse, it means the last button was released. Note that if
  /// any other buttons are still pressed when one button is released, that
  /// should be sent as a kMove rather than a kUp.
  static const int kUp = 1;

  /// The pointer, which must have been been up, is now down.
  ///
  /// For touch, this means that the pointer has come into contact with the
  /// screen. For a mouse, it means a button is now pressed. Note that if any
  /// other buttons are already pressed when a new button is pressed, that
  /// should be sent as a kMove rather than a kDown.
  static const int kDown = 2;

  /// The pointer moved while down.
  ///
  /// This is also used for changes in button state that don't cause a kDown or
  /// kUp, such as releasing one of two pressed buttons.
  static const int kMove = 3;

  /// The pointer is now sending input to Flutter. For instance, a mouse has
  /// entered the area where the Flutter content is displayed.
  ///
  /// A pointer should always be added before sending any other events.
  static const int kAdd = 4;

  /// The pointer is no longer sending input to Flutter. For instance, a mouse
  /// has left the area where the Flutter content is displayed.
  ///
  /// A removed pointer should no longer send events until sending a new kAdd.
  static const int kRemove = 5;

  /// The pointer moved while up.
  static const int kHover = 6;

  /// A pan/zoom started on this pointer.
  static const int kPanZoomStart = 7;

  /// The pan/zoom updated.
  static const int kPanZoomUpdate = 8;

  /// The pan/zoom ended.
  static const int kPanZoomEnd = 9;
}

/// The device type that created a pointer event.
abstract class FlutterPointerDeviceKind {
  static const int kFlutterPointerDeviceKindMouse = 1;
  static const int kFlutterPointerDeviceKindTouch = 2;
  static const int kFlutterPointerDeviceKindStylus = 3;
  static const int kFlutterPointerDeviceKindTrackpad = 4;
}

/// Flags for the `buttons` field of `FlutterPointerEvent` when `device_kind`
/// is `kFlutterPointerDeviceKindMouse`.
abstract class FlutterPointerMouseButtons {
  static const int kFlutterPointerButtonMousePrimary = 1;
  static const int kFlutterPointerButtonMouseSecondary = 2;
  static const int kFlutterPointerButtonMouseMiddle = 4;
  static const int kFlutterPointerButtonMouseBack = 8;
  static const int kFlutterPointerButtonMouseForward = 16;
}

/// The type of a pointer signal.
abstract class FlutterPointerSignalKind {
  static const int kFlutterPointerSignalKindNone = 0;
  static const int kFlutterPointerSignalKindScroll = 1;
}

class FlutterPointerEvent extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterPointerEvent).
  @ffi.Size()
  external int struct_size;

  @ffi.Int32()
  external int phase;

  /// The timestamp at which the pointer event was generated. The timestamp
  /// should be specified in microseconds and the clock should be the same as
  /// that used by `FlutterEngineGetCurrentTime`.
  @ffi.Size()
  external int timestamp;

  /// The x coordinate of the pointer event in physical pixels.
  @ffi.Double()
  external double x;

  /// The y coordinate of the pointer event in physical pixels.
  @ffi.Double()
  external double y;

  /// An optional device identifier. If this is not specified, it is assumed
  /// that the embedder has no multi-touch capability.
  @ffi.Int32()
  external int device;

  @ffi.Int32()
  external int signal_kind;

  /// The x offset of the scroll in physical pixels.
  @ffi.Double()
  external double scroll_delta_x;

  /// The y offset of the scroll in physical pixels.
  @ffi.Double()
  external double scroll_delta_y;

  /// The type of the device generating this event.
  /// Backwards compatibility note: If this is not set, the device will be
  /// treated as a mouse, with the primary button set for `kDown` and `kMove`.
  /// If set explicitly to `kFlutterPointerDeviceKindMouse`, you must set the
  /// correct buttons.
  @ffi.Int32()
  external int device_kind;

  /// The buttons currently pressed, if any.
  @ffi.Int64()
  external int buttons;

  /// The x offset of the pan/zoom in physical pixels.
  @ffi.Double()
  external double pan_x;

  /// The y offset of the pan/zoom in physical pixels.
  @ffi.Double()
  external double pan_y;

  /// The scale of the pan/zoom, where 1.0 is the initial scale.
  @ffi.Double()
  external double scale;

  /// The rotation of the pan/zoom in radians, where 0.0 is the initial angle.
  @ffi.Double()
  external double rotation;
}

abstract class FlutterKeyEventType {
  static const int kFlutterKeyEventTypeUp = 1;
  static const int kFlutterKeyEventTypeDown = 2;
  static const int kFlutterKeyEventTypeRepeat = 3;
}

/// A structure to represent a key event.
///
/// Sending `FlutterKeyEvent` via `FlutterEngineSendKeyEvent` results in a
/// corresponding `FlutterKeyEvent` to be dispatched in the framework. It is
/// embedder's responsibility to ensure the regularity of sent events, since the
/// framework only performs simple one-to-one mapping. The events must conform
/// the following rules:
///
/// * Each key press sequence shall consist of one key down event (`kind` being
/// `kFlutterKeyEventTypeDown`), zero or more repeat events, and one key up
/// event, representing a physical key button being pressed, held, and
/// released.
/// * All events throughout a key press sequence shall have the same `physical`
/// and `logical`. Having different `character`s is allowed.
///
/// A `FlutterKeyEvent` with `physical` 0 and `logical` 0 is an empty event.
/// This is the only case either `physical` or `logical` can be 0. An empty
/// event must be sent if a key message should be converted to no
/// `FlutterKeyEvent`s, for example, when a key down message is received for a
/// key that has already been pressed according to the record. This is to ensure
/// some `FlutterKeyEvent` arrives at the framework before raw key message.
/// See https://github.com/flutter/flutter/issues/87230.
class FlutterKeyEvent extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterKeyEvent).
  @ffi.Size()
  external int struct_size;

  /// The timestamp at which the key event was generated. The timestamp should
  /// be specified in microseconds and the clock should be the same as that used
  /// by `FlutterEngineGetCurrentTime`.
  @ffi.Double()
  external double timestamp;

  /// The event kind.
  @ffi.Int32()
  external int type;

  /// The USB HID code for the physical key of the event.
  ///
  /// For the full definition and list of pre-defined physical keys, see
  /// `PhysicalKeyboardKey` from the framework.
  ///
  /// The only case that `physical` might be 0 is when this is an empty event.
  /// See `FlutterKeyEvent` for introduction.
  @ffi.Uint64()
  external int physical;

  /// The key ID for the logical key of this event.
  ///
  /// For the full definition and a list of pre-defined logical keys, see
  /// `LogicalKeyboardKey` from the framework.
  ///
  /// The only case that `logical` might be 0 is when this is an empty event.
  /// See `FlutterKeyEvent` for introduction.
  @ffi.Uint64()
  external int logical;

  /// Null-terminated character input from the event. Can be null. Ignored for
  /// up events.
  external ffi.Pointer<ffi.Char> character;

  /// True if this event does not correspond to a native event.
  ///
  /// The embedder is likely to skip events and/or construct new events that do
  /// not correspond to any native events in order to conform the regularity
  /// of events (as documented in `FlutterKeyEvent`). An example is when a key
  /// up is missed due to loss of window focus, on a platform that provides
  /// query to key pressing status, the embedder might realize that the key has
  /// been released at the next key event, and should construct a synthesized up
  /// event immediately before the actual event.
  ///
  /// An event being synthesized means that the `timestamp` might greatly
  /// deviate from the actual time when the event occurs physically.
  @ffi.Bool()
  external bool synthesized;
}

class _FlutterPlatformMessageResponseHandle extends ffi.Opaque {}

class FlutterPlatformMessage extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterPlatformMessage).
  @ffi.Size()
  external int struct_size;

  external ffi.Pointer<ffi.Char> channel;

  external ffi.Pointer<ffi.Uint8> message;

  @ffi.Size()
  external int message_size;

  /// The response handle on which to invoke
  /// `FlutterEngineSendPlatformMessageResponse` when the response is ready.
  /// `FlutterEngineSendPlatformMessageResponse` must be called for all messages
  /// received by the embedder. Failure to call
  /// `FlutterEngineSendPlatformMessageResponse` will cause a memory leak. It is
  /// not safe to send multiple responses on a single response object.
  external ffi.Pointer<FlutterPlatformMessageResponseHandle> response_handle;
}

typedef FlutterPlatformMessageResponseHandle
    = _FlutterPlatformMessageResponseHandle;

/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during PipelineOwner.flushSemantics), which happens after
/// compositing. Updates are then pushed to embedders via the registered
/// `FlutterUpdateSemanticsNodeCallback`.
class FlutterSemanticsNode extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterSemanticsNode).
  @ffi.Size()
  external int struct_size;

  /// The unique identifier for this node.
  @ffi.Int32()
  external int id;

  /// The set of semantics flags associated with this node.
  @ffi.Int32()
  external int flags;

  /// The set of semantics actions applicable to this node.
  @ffi.Int32()
  external int actions;

  /// The position at which the text selection originates.
  @ffi.Int32()
  external int text_selection_base;

  /// The position at which the text selection terminates.
  @ffi.Int32()
  external int text_selection_extent;

  /// The total number of scrollable children that contribute to semantics.
  @ffi.Int32()
  external int scroll_child_count;

  /// The index of the first visible semantic child of a scroll node.
  @ffi.Int32()
  external int scroll_index;

  /// The current scrolling position in logical pixels if the node is
  /// scrollable.
  @ffi.Double()
  external double scroll_position;

  /// The maximum in-range value for `scrollPosition` if the node is scrollable.
  @ffi.Double()
  external double scroll_extent_max;

  /// The minimum in-range value for `scrollPosition` if the node is scrollable.
  @ffi.Double()
  external double scroll_extent_min;

  /// The elevation along the z-axis at which the rect of this semantics node is
  /// located above its parent.
  @ffi.Double()
  external double elevation;

  /// Describes how much space the semantics node takes up along the z-axis.
  @ffi.Double()
  external double thickness;

  /// A textual description of the node.
  external ffi.Pointer<ffi.Char> label;

  /// A brief description of the result of performing an action on the node.
  external ffi.Pointer<ffi.Char> hint;

  /// A textual description of the current value of the node.
  external ffi.Pointer<ffi.Char> value;

  /// A value that `value` will have after a kFlutterSemanticsActionIncrease`
  /// action has been performed.
  external ffi.Pointer<ffi.Char> increased_value;

  /// A value that `value` will have after a kFlutterSemanticsActionDecrease`
  /// action has been performed.
  external ffi.Pointer<ffi.Char> decreased_value;

  /// The reading direction for `label`, `value`, `hint`, `increasedValue`, and
  /// `decreasedValue`.
  @ffi.Int32()
  external int text_direction;

  /// The bounding box for this node in its coordinate system.
  external FlutterRect rect;

  /// The transform from this node's coordinate system to its parent's
  /// coordinate system.
  external FlutterTransformation transform;

  /// The number of children this node has.
  @ffi.Size()
  external int child_count;

  /// Array of child node IDs in traversal order. Has length `child_count`.
  external ffi.Pointer<ffi.Int32> children_in_traversal_order;

  /// Array of child node IDs in hit test order. Has length `child_count`.
  external ffi.Pointer<ffi.Int32> children_in_hit_test_order;

  /// The number of custom accessibility action associated with this node.
  @ffi.Size()
  external int custom_accessibility_actions_count;

  /// Array of `FlutterSemanticsCustomAction` IDs associated with this node.
  /// Has length `custom_accessibility_actions_count`.
  external ffi.Pointer<ffi.Int32> custom_accessibility_actions;

  /// Identifier of the platform view associated with this semantics node, or
  /// -1 if none.
  @FlutterPlatformViewIdentifier()
  external int platform_view_id;
}

/// The identifier of the platform view. This identifier is specified by the
/// application when a platform view is added to the scene via the
/// `SceneBuilder.addPlatformView` call.
typedef FlutterPlatformViewIdentifier = ffi.Int64;

/// A custom semantics action, or action override.
///
/// Custom actions can be registered by applications in order to provide
/// semantic actions other than the standard actions available through the
/// `FlutterSemanticsAction` enum.
///
/// Action overrides are custom actions that the application developer requests
/// to be used in place of the standard actions in the `FlutterSemanticsAction`
/// enum.
class FlutterSemanticsCustomAction extends ffi.Struct {
  /// The size of the struct. Must be sizeof(FlutterSemanticsCustomAction).
  @ffi.Size()
  external int struct_size;

  /// The unique custom action or action override ID.
  @ffi.Int32()
  external int id;

  /// For overridden standard actions, corresponds to the
  /// `FlutterSemanticsAction` to override.
  @ffi.Int32()
  external int override_action;

  /// The user-readable name of this custom semantics action.
  external ffi.Pointer<ffi.Char> label;

  /// The hint description of this custom semantics action.
  external ffi.Pointer<ffi.Char> hint;
}

class _FlutterTaskRunner extends ffi.Opaque {}

class FlutterTask extends ffi.Struct {
  external FlutterTaskRunner runner;

  @ffi.Uint64()
  external int task;
}

typedef FlutterTaskRunner = ffi.Pointer<_FlutterTaskRunner>;

/// An interface used by the Flutter engine to execute tasks at the target time
/// on a specified thread. There should be a 1-1 relationship between a thread
/// and a task runner. It is undefined behavior to run a task on a thread that
/// is not associated with its task runner.
class FlutterTaskRunnerDescription extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterTaskRunnerDescription).
  @ffi.Size()
  external int struct_size;

  external ffi.Pointer<ffi.Void> user_data;

  /// May be called from any thread. Should return true if tasks posted on the
  /// calling thread will be run on that same thread.
  ///
  /// @attention     This field is required.
  external BoolCallback runs_task_on_current_thread_callback;

  /// May be called from any thread. The given task should be executed by the
  /// embedder on the thread associated with that task runner by calling
  /// `FlutterEngineRunTask` at the given target time. The system monotonic
  /// clock should be used for the target time. The target time is the absolute
  /// time from epoch (NOT a delta) at which the task must be returned back to
  /// the engine on the correct thread. If the embedder needs to calculate a
  /// delta, `FlutterEngineGetCurrentTime` may be called and the difference used
  /// as the delta.
  ///
  /// @attention     This field is required.
  external FlutterTaskRunnerPostTaskCallback post_task_callback;

  /// A unique identifier for the task runner. If multiple task runners service
  /// tasks on the same thread, their identifiers must match.
  @ffi.Size()
  external int identifier;
}

typedef FlutterTaskRunnerPostTaskCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(FlutterTask, ffi.Uint64, ffi.Pointer<ffi.Void>)>>;

class FlutterCustomTaskRunners extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterCustomTaskRunners).
  @ffi.Size()
  external int struct_size;

  /// Specify the task runner for the thread on which the `FlutterEngineRun`
  /// call is made. The same task runner description can be specified for both
  /// the render and platform task runners. This makes the Flutter engine use
  /// the same thread for both task runners.
  external ffi.Pointer<FlutterTaskRunnerDescription> platform_task_runner;

  /// Specify the task runner for the thread on which the render tasks will be
  /// run. The same task runner description can be specified for both the render
  /// and platform task runners. This makes the Flutter engine use the same
  /// thread for both task runners.
  external ffi.Pointer<FlutterTaskRunnerDescription> render_task_runner;

  /// Specify a callback that is used to set the thread priority for embedder
  /// task runners.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>
      thread_priority_setter;
}

class FlutterOpenGLBackingStore extends ffi.Struct {
  /// The type of the OpenGL backing store. Currently, it can either be a
  /// texture or a framebuffer.
  @ffi.Int32()
  external int type;
}

class FlutterSoftwareBackingStore extends ffi.Struct {
  /// A pointer to the raw bytes of the allocation described by this software
  /// backing store.
  external ffi.Pointer<ffi.Void> allocation;

  /// The number of bytes in a single row of the allocation.
  @ffi.Size()
  external int row_bytes;

  /// The number of rows in the allocation.
  @ffi.Size()
  external int height;

  /// A baton that is not interpreted by the engine in any way. It will be given
  /// back to the embedder in the destruction callback below. Embedder resources
  /// may be associated with this baton.
  external ffi.Pointer<ffi.Void> user_data;

  /// The callback invoked by the engine when it no longer needs this backing
  /// store.
  external VoidCallback destruction_callback;
}

class FlutterMetalBackingStore extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterMetalBackingStore).
  @ffi.Size()
  external int struct_size;
}

class FlutterVulkanBackingStore extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterVulkanBackingStore).
  @ffi.Size()
  external int struct_size;

  /// The image that the layer will be rendered to. This image must already be
  /// available for the engine to bind for writing when it's given to the engine
  /// via the backing store creation callback. The engine will perform a host
  /// sync for all layers prior to calling the compositor present callback, and
  /// so the written layer images can be freely bound by the embedder without
  /// any additional synchronization.
  external ffi.Pointer<FlutterVulkanImage> image;

  /// A baton that is not interpreted by the engine in any way. It will be given
  /// back to the embedder in the destruction callback below. Embedder resources
  /// may be associated with this baton.
  external ffi.Pointer<ffi.Void> user_data;

  /// The callback invoked by the engine when it no longer needs this backing
  /// store.
  external VoidCallback destruction_callback;
}

abstract class FlutterPlatformViewMutationType {
  /// Indicates that the Flutter application requested that an opacity be
  /// applied to the platform view.
  static const int kFlutterPlatformViewMutationTypeOpacity = 0;

  /// Indicates that the Flutter application requested that the platform view be
  /// clipped using a rectangle.
  static const int kFlutterPlatformViewMutationTypeClipRect = 1;

  /// Indicates that the Flutter application requested that the platform view be
  /// clipped using a rounded rectangle.
  static const int kFlutterPlatformViewMutationTypeClipRoundedRect = 2;

  /// Indicates that the Flutter application requested that the platform view be
  /// transformed before composition.
  static const int kFlutterPlatformViewMutationTypeTransformation = 3;
}

class FlutterPlatformViewMutation extends ffi.Struct {
  /// The type of the mutation described by the subsequent union.
  @ffi.Int32()
  external int type;
}

class FlutterPlatformView extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterPlatformView).
  @ffi.Size()
  external int struct_size;

  /// The identifier of this platform view. This identifier is specified by the
  /// application when a platform view is added to the scene via the
  /// `SceneBuilder.addPlatformView` call.
  @FlutterPlatformViewIdentifier()
  external int identifier;

  /// The number of mutations to be applied to the platform view by the embedder
  /// before on-screen composition.
  @ffi.Size()
  external int mutations_count;

  /// The mutations to be applied by this platform view before it is composited
  /// on-screen. The Flutter application may transform the platform view but
  /// these transformations cannot be affected by the Flutter compositor because
  /// it does not render platform views. Since the embedder is responsible for
  /// composition of these views, it is also the embedder's responsibility to
  /// affect the appropriate transformation.
  ///
  /// The mutations must be applied in order. The mutations done in the
  /// collection don't take into account the device pixel ratio or the root
  /// surface transformation. If these exist, the first mutation in the list
  /// will be a transformation mutation to make sure subsequent mutations are in
  /// the correct coordinate space.
  external ffi.Pointer<ffi.Pointer<FlutterPlatformViewMutation>> mutations;
}

abstract class FlutterBackingStoreType {
  /// Specifies an OpenGL backing store. Can either be an OpenGL texture or
  /// framebuffer.
  static const int kFlutterBackingStoreTypeOpenGL = 0;

  /// Specified an software allocation for Flutter to render into using the CPU.
  static const int kFlutterBackingStoreTypeSoftware = 1;

  /// Specifies a Metal backing store. This is backed by a Metal texture.
  static const int kFlutterBackingStoreTypeMetal = 2;

  /// Specifies a Vulkan backing store. This is backed by a Vulkan VkImage.
  static const int kFlutterBackingStoreTypeVulkan = 3;
}

class FlutterBackingStore extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterBackingStore).
  @ffi.Size()
  external int struct_size;

  /// A baton that is not interpreted by the engine in any way. The embedder may
  /// use this to associate resources that are tied to the lifecycle of the
  /// `FlutterBackingStore`.
  external ffi.Pointer<ffi.Void> user_data;

  /// Specifies the type of backing store.
  @ffi.Int32()
  external int type;

  /// Indicates if this backing store was updated since the last time it was
  /// associated with a presented layer.
  @ffi.Bool()
  external bool did_update;
}

class FlutterBackingStoreConfig extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterBackingStoreConfig).
  @ffi.Size()
  external int struct_size;

  /// The size of the render target the engine expects to render into.
  external FlutterSize size;
}

abstract class FlutterLayerContentType {
  /// Indicates that the contents of this layer are rendered by Flutter into a
  /// backing store.
  static const int kFlutterLayerContentTypeBackingStore = 0;

  /// Indicates that the contents of this layer are determined by the embedder.
  static const int kFlutterLayerContentTypePlatformView = 1;
}

class FlutterLayer extends ffi.Struct {
  /// This size of this struct. Must be sizeof(FlutterLayer).
  @ffi.Size()
  external int struct_size;

  /// Each layer displays contents in one way or another. The type indicates
  /// whether those contents are specified by Flutter or the embedder.
  @ffi.Int32()
  external int type;

  /// The offset of this layer (in physical pixels) relative to the top left of
  /// the root surface used by the engine.
  external FlutterPoint offset;

  /// The size of the layer (in physical pixels).
  external FlutterSize size;
}

class FlutterCompositor extends ffi.Struct {
  /// This size of this struct. Must be sizeof(FlutterCompositor).
  @ffi.Size()
  external int struct_size;

  /// A baton that in not interpreted by the engine in any way. If it passed
  /// back to the embedder in `FlutterCompositor.create_backing_store_callback`,
  /// `FlutterCompositor.collect_backing_store_callback` and
  /// `FlutterCompositor.present_layers_callback`
  external ffi.Pointer<ffi.Void> user_data;

  /// A callback invoked by the engine to obtain a backing store for a specific
  /// `FlutterLayer`.
  ///
  /// On ABI stability: Callers must take care to restrict access within
  /// `FlutterBackingStore::struct_size` when specifying a new backing store to
  /// the engine. This only matters if the embedder expects to be used with
  /// engines older than the version whose headers it used during compilation.
  external FlutterBackingStoreCreateCallback create_backing_store_callback;

  /// A callback invoked by the engine to release the backing store. The
  /// embedder may collect any resources associated with the backing store.
  external FlutterBackingStoreCollectCallback collect_backing_store_callback;

  /// Callback invoked by the engine to composite the contents of each layer
  /// onto the screen.
  external FlutterLayersPresentCallback present_layers_callback;

  /// Avoid caching backing stores provided by this compositor.
  @ffi.Bool()
  external bool avoid_backing_store_cache;
}

typedef FlutterBackingStoreCreateCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<FlutterBackingStoreConfig>,
            ffi.Pointer<FlutterBackingStore>, ffi.Pointer<ffi.Void>)>>;
typedef FlutterBackingStoreCollectCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<FlutterBackingStore>, ffi.Pointer<ffi.Void>)>>;
typedef FlutterLayersPresentCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Pointer<FlutterLayer>>, ffi.Size,
            ffi.Pointer<ffi.Void>)>>;

class FlutterLocale extends ffi.Struct {
  /// This size of this struct. Must be sizeof(FlutterLocale).
  @ffi.Size()
  external int struct_size;

  /// The language code of the locale. For example, "en". This is a required
  /// field. The string must be null terminated. It may be collected after the
  /// call to `FlutterEngineUpdateLocales`.
  external ffi.Pointer<ffi.Char> language_code;

  /// The country code of the locale. For example, "US". This is a an optional
  /// field. The string must be null terminated if present. It may be collected
  /// after the call to `FlutterEngineUpdateLocales`. If not present, a
  /// `nullptr` may be specified.
  external ffi.Pointer<ffi.Char> country_code;

  /// The script code of the locale. This is a an optional field. The string
  /// must be null terminated if present. It may be collected after the call to
  /// `FlutterEngineUpdateLocales`. If not present, a `nullptr` may be
  /// specified.
  external ffi.Pointer<ffi.Char> script_code;

  /// The variant code of the locale. This is a an optional field. The string
  /// must be null terminated if present. It may be collected after the call to
  /// `FlutterEngineUpdateLocales`. If not present, a `nullptr` may be
  /// specified.
  external ffi.Pointer<ffi.Char> variant_code;
}

class FlutterEngineDisplay extends ffi.Struct {
  /// This size of this struct. Must be sizeof(FlutterDisplay).
  @ffi.Size()
  external int struct_size;

  @FlutterEngineDisplayId()
  external int display_id;

  /// This is set to true if the embedder only has one display. In cases where
  /// this is set to true, the value of display_id is ignored. In cases where
  /// this is not set to true, it is expected that a valid display_id be
  /// provided.
  @ffi.Bool()
  external bool single_display;

  /// This represents the refresh period in frames per second. This value may be
  /// zero if the device is not running or unavailable or unknown.
  @ffi.Double()
  external double refresh_rate;
}

/// Display refers to a graphics hardware system consisting of a framebuffer,
/// typically a monitor or a screen. This ID is unique per display and is
/// stable until the Flutter application restarts.
typedef FlutterEngineDisplayId = ffi.Uint64;

/// The update type parameter that is passed to
/// `FlutterEngineNotifyDisplayUpdate`.
abstract class FlutterEngineDisplaysUpdateType {
  /// `FlutterEngineDisplay`s that were active during start-up. A display is
  /// considered active if:
  /// 1. The frame buffer hardware is connected.
  /// 2. The display is drawable, e.g. it isn't being mirrored from another
  /// connected display or sleeping.
  static const int kFlutterEngineDisplaysUpdateTypeStartup = 0;
  static const int kFlutterEngineDisplaysUpdateTypeCount = 1;
}

abstract class FlutterEngineDartObjectType {
  static const int kFlutterEngineDartObjectTypeNull = 0;
  static const int kFlutterEngineDartObjectTypeBool = 1;
  static const int kFlutterEngineDartObjectTypeInt32 = 2;
  static const int kFlutterEngineDartObjectTypeInt64 = 3;
  static const int kFlutterEngineDartObjectTypeDouble = 4;
  static const int kFlutterEngineDartObjectTypeString = 5;

  /// The object will be made available to Dart code as an instance of
  /// Uint8List.
  static const int kFlutterEngineDartObjectTypeBuffer = 6;
}

class FlutterEngineDartBuffer extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterEngineDartBuffer).
  @ffi.Size()
  external int struct_size;

  /// An opaque baton passed back to the embedder when the
  /// buffer_collect_callback is invoked. The engine does not interpret this
  /// field in any way.
  external ffi.Pointer<ffi.Void> user_data;

  /// This is an optional field.
  ///
  /// When specified, the engine will assume that the buffer is owned by the
  /// embedder. When the data is no longer needed by any isolate, this callback
  /// will be made on an internal engine managed thread. The embedder is free to
  /// collect the buffer here. When this field is specified, it is the embedders
  /// responsibility to keep the buffer alive and not modify it till this
  /// callback is invoked by the engine. The user data specified in the callback
  /// is the value of `user_data` field in this struct.
  ///
  /// When NOT specified, the VM creates an internal copy of the buffer. The
  /// caller is free to modify the buffer as necessary or collect it immediately
  /// after the call to `FlutterEnginePostDartObject`.
  ///
  /// @attention      The buffer_collect_callback is will only be invoked by the
  /// engine when the `FlutterEnginePostDartObject` method
  /// returns kSuccess. In case of non-successful calls to this
  /// method, it is the embedders responsibility to collect the
  /// buffer.
  external VoidCallback buffer_collect_callback;

  /// A pointer to the bytes of the buffer. When the buffer is owned by the
  /// embedder (by specifying the `buffer_collect_callback`), Dart code may
  /// modify that embedder owned buffer. For this reason, it is important that
  /// this buffer not have page protections that restrict writing to this
  /// buffer.
  external ffi.Pointer<ffi.Uint8> buffer;

  /// The size of the buffer.
  @ffi.Size()
  external int buffer_size;
}

/// This struct specifies the native representation of a Dart object that can be
/// sent via a send port to any isolate in the VM that has the corresponding
/// receive port.
///
/// All fields in this struct are copied out in the call to
/// `FlutterEnginePostDartObject` and the caller is free to reuse or collect
/// this struct after that call.
class FlutterEngineDartObject extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

/// This enum allows embedders to determine the type of the engine thread in the
/// FlutterNativeThreadCallback. Based on the thread type, the embedder may be
/// able to tweak the thread priorities for optimum performance.
abstract class FlutterNativeThreadType {
  /// The Flutter Engine considers the thread on which the FlutterEngineRun call
  /// is made to be the platform thread. There is only one such thread per
  /// engine instance.
  static const int kFlutterNativeThreadTypePlatform = 0;

  /// This is the thread the Flutter Engine uses to execute rendering commands
  /// based on the selected client rendering API. There is only one such thread
  /// per engine instance.
  static const int kFlutterNativeThreadTypeRender = 1;

  /// This is a dedicated thread on which the root Dart isolate is serviced.
  /// There is only one such thread per engine instance.
  static const int kFlutterNativeThreadTypeUI = 2;

  /// Multiple threads are used by the Flutter engine to perform long running
  /// background tasks.
  static const int kFlutterNativeThreadTypeWorker = 3;
}

/// AOT data source type.
abstract class FlutterEngineAOTDataSourceType {
  static const int kFlutterEngineAOTDataSourceTypeElfPath = 0;
}

/// This struct specifies one of the various locations the engine can look for
/// AOT data sources.
class FlutterEngineAOTDataSource extends ffi.Struct {
  @ffi.Int32()
  external int type;
}

class _FlutterEngineAOTData extends ffi.Opaque {}

class FlutterProjectArgs extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterProjectArgs).
  @ffi.Size()
  external int struct_size;

  /// The path to the Flutter assets directory containing project assets. The
  /// string can be collected after the call to `FlutterEngineRun` returns. The
  /// string must be NULL terminated.
  external ffi.Pointer<ffi.Char> assets_path;

  /// The path to the Dart file containing the `main` entry point.
  /// The string can be collected after the call to `FlutterEngineRun` returns.
  /// The string must be NULL terminated.
  ///
  /// @deprecated     As of Dart 2, running from Dart source is no longer
  /// supported. Dart code should now be compiled to kernel form
  /// and will be loaded by from `kernel_blob.bin` in the assets
  /// directory. This struct member is retained for ABI
  /// stability.
  external ffi.Pointer<ffi.Char> main_path__unused__;

  /// The path to the `.packages` file for the project. The string can be
  /// collected after the call to `FlutterEngineRun` returns. The string must be
  /// NULL terminated.
  ///
  /// @deprecated    As of Dart 2, running from Dart source is no longer
  /// supported. Dart code should now be compiled to kernel form
  /// and will be loaded by from `kernel_blob.bin` in the assets
  /// directory. This struct member is retained for ABI
  /// stability.
  external ffi.Pointer<ffi.Char> packages_path__unused__;

  /// The path to the `icudtl.dat` file for the project. The string can be
  /// collected after the call to `FlutterEngineRun` returns. The string must
  /// be NULL terminated.
  external ffi.Pointer<ffi.Char> icu_data_path;

  /// The command line argument count used to initialize the project.
  @ffi.Int()
  external int command_line_argc;

  /// The command line arguments used to initialize the project. The strings can
  /// be collected after the call to `FlutterEngineRun` returns. The strings
  /// must be `NULL` terminated.
  ///
  /// @attention     The first item in the command line (if specified at all) is
  /// interpreted as the executable name. So if an engine flag
  /// needs to be passed into the same, it needs to not be the
  /// very first item in the list.
  ///
  /// The set of engine flags are only meant to control
  /// unstable features in the engine. Deployed applications should not pass any
  /// command line arguments at all as they may affect engine stability at
  /// runtime in the presence of un-sanitized input. The list of currently
  /// recognized engine flags and their descriptions can be retrieved from the
  /// `switches.h` engine source file.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> command_line_argv;

  /// The callback invoked by the engine in order to give the embedder the
  /// chance to respond to platform messages from the Dart application.
  /// The callback will be invoked on the thread on which the `FlutterEngineRun`
  /// call is made. The second parameter, `user_data`, is supplied when
  /// `FlutterEngineRun` or `FlutterEngineInitialize` is called.
  external FlutterPlatformMessageCallback platform_message_callback;

  /// The VM snapshot data buffer used in AOT operation. This buffer must be
  /// mapped in as read-only. For more information refer to the documentation on
  /// the Wiki at
  /// https://github.com/flutter/flutter/wiki/Flutter-engine-operation-in-AOT-Mode
  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  /// The size of the VM snapshot data buffer.  If vm_snapshot_data is a symbol
  /// reference, 0 may be passed here.
  @ffi.Size()
  external int vm_snapshot_data_size;

  /// The VM snapshot instructions buffer used in AOT operation. This buffer
  /// must be mapped in as read-execute. For more information refer to the
  /// documentation on the Wiki at
  /// https://github.com/flutter/flutter/wiki/Flutter-engine-operation-in-AOT-Mode
  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  /// The size of the VM snapshot instructions buffer. If
  /// vm_snapshot_instructions is a symbol reference, 0 may be passed here.
  @ffi.Size()
  external int vm_snapshot_instructions_size;

  /// The isolate snapshot data buffer used in AOT operation. This buffer must
  /// be mapped in as read-only. For more information refer to the documentation
  /// on the Wiki at
  /// https://github.com/flutter/flutter/wiki/Flutter-engine-operation-in-AOT-Mode
  external ffi.Pointer<ffi.Uint8> isolate_snapshot_data;

  /// The size of the isolate snapshot data buffer.  If isolate_snapshot_data is
  /// a symbol reference, 0 may be passed here.
  @ffi.Size()
  external int isolate_snapshot_data_size;

  /// The isolate snapshot instructions buffer used in AOT operation. This
  /// buffer must be mapped in as read-execute. For more information refer to
  /// the documentation on the Wiki at
  /// https://github.com/flutter/flutter/wiki/Flutter-engine-operation-in-AOT-Mode
  external ffi.Pointer<ffi.Uint8> isolate_snapshot_instructions;

  /// The size of the isolate snapshot instructions buffer. If
  /// isolate_snapshot_instructions is a symbol reference, 0 may be passed here.
  @ffi.Size()
  external int isolate_snapshot_instructions_size;

  /// The callback invoked by the engine in root isolate scope. Called
  /// immediately after the root isolate has been created and marked runnable.
  external VoidCallback root_isolate_create_callback;

  /// The callback invoked by the engine in order to give the embedder the
  /// chance to respond to semantics node updates from the Dart application.
  /// Semantics node updates are sent in batches terminated by a 'batch end'
  /// callback that is passed a sentinel `FlutterSemanticsNode` whose `id` field
  /// has the value `kFlutterSemanticsNodeIdBatchEnd`.
  ///
  /// The callback will be invoked on the thread on which the `FlutterEngineRun`
  /// call is made.
  external FlutterUpdateSemanticsNodeCallback update_semantics_node_callback;

  /// The callback invoked by the engine in order to give the embedder the
  /// chance to respond to updates to semantics custom actions from the Dart
  /// application.  Custom action updates are sent in batches terminated by a
  /// 'batch end' callback that is passed a sentinel
  /// `FlutterSemanticsCustomAction` whose `id` field has the value
  /// `kFlutterSemanticsCustomActionIdBatchEnd`.
  ///
  /// The callback will be invoked on the thread on which the `FlutterEngineRun`
  /// call is made.
  external FlutterUpdateSemanticsCustomActionCallback
      update_semantics_custom_action_callback;

  /// Path to a directory used to store data that is cached across runs of a
  /// Flutter application (such as compiled shader programs used by Skia).
  /// This is optional.  The string must be NULL terminated.
  ///
  /// This is different from the cache-path-dir argument defined in switches.h,
  /// which is used in `flutter::Settings` as `temp_directory_path`.
  external ffi.Pointer<ffi.Char> persistent_cache_path;

  /// If true, the engine would only read the existing cache, but not write new
  /// ones.
  @ffi.Bool()
  external bool is_persistent_cache_read_only;

  /// A callback that gets invoked by the engine when it attempts to wait for a
  /// platform vsync event. The engine will give the platform a baton that needs
  /// to be returned back to the engine via `FlutterEngineOnVsync`. All batons
  /// must be retured to the engine before initializing a
  /// `FlutterEngineShutdown`. Not doing the same will result in a memory leak.
  /// While the call to `FlutterEngineOnVsync` must occur on the thread that
  /// made the call to `FlutterEngineRun`, the engine will make this callback on
  /// an internal engine-managed thread. If the components accessed on the
  /// embedder are not thread safe, the appropriate re-threading must be done.
  external VsyncCallback vsync_callback;

  /// The name of a custom Dart entrypoint. This is optional and specifying a
  /// null or empty entrypoint makes the engine look for a method named "main"
  /// in the root library of the application.
  ///
  /// Care must be taken to ensure that the custom entrypoint is not tree-shaken
  /// away. Usually, this is done using the `@pragma('vm:entry-point')`
  /// decoration.
  external ffi.Pointer<ffi.Char> custom_dart_entrypoint;

  /// Typically the Flutter engine create and manages its internal threads. This
  /// optional argument allows for the specification of task runner interfaces
  /// to event loops managed by the embedder on threads it creates.
  external ffi.Pointer<FlutterCustomTaskRunners> custom_task_runners;

  /// All `FlutterEngine` instances in the process share the same Dart VM. When
  /// the first engine is launched, it starts the Dart VM as well. It used to be
  /// the case that it was not possible to shutdown the Dart VM cleanly and
  /// start it back up in the process in a safe manner. This issue has since
  /// been patched. Unfortunately, applications already began to make use of the
  /// fact that shutting down the Flutter engine instance left a running VM in
  /// the process. Since a Flutter engine could be launched on any thread,
  /// applications would "warm up" the VM on another thread by launching
  /// an engine with no isolates and then shutting it down immediately. The main
  /// Flutter application could then be started on the main thread without
  /// having to incur the Dart VM startup costs at that time. With the new
  /// behavior, this "optimization" immediately becomes massive performance
  /// pessimization as the VM would be started up in the "warm up" phase, shut
  /// down there and then started again on the main thread. Changing this
  /// behavior was deemed to be an unacceptable breaking change. Embedders that
  /// wish to shutdown the Dart VM when the last engine is terminated in the
  /// process should opt into this behavior by setting this flag to true.
  @ffi.Bool()
  external bool shutdown_dart_vm_when_done;

  /// Typically, Flutter renders the layer hierarchy into a single root surface.
  /// However, when embedders need to interleave their own contents within the
  /// Flutter layer hierarchy, their applications can push platform views within
  /// the Flutter scene. This is done using the `SceneBuilder.addPlatformView`
  /// call. When this happens, the Flutter rasterizer divides the effective view
  /// hierarchy into multiple layers. Each layer gets its own backing store and
  /// Flutter renders into the same. Once the layers contents have been
  /// fulfilled, the embedder is asked to composite these layers on-screen. At
  /// this point, it can interleave its own contents within the effective
  /// hierarchy. The interface for the specification of these layer backing
  /// stores and the hooks to listen for the composition of layers on-screen can
  /// be controlled using this field. This field is completely optional. In its
  /// absence, platforms views in the scene are ignored and Flutter renders to
  /// the root surface as normal.
  external ffi.Pointer<FlutterCompositor> compositor;

  /// Max size of the old gen heap for the Dart VM in MB, or 0 for unlimited, -1
  /// for default value.
  ///
  /// See also:
  /// https://github.com/dart-lang/sdk/blob/ca64509108b3e7219c50d6c52877c85ab6a35ff2/runtime/vm/flag_list.h#L150
  @ffi.Int64()
  external int dart_old_gen_heap_size;

  /// The AOT data to be used in AOT operation.
  ///
  /// Embedders should instantiate and destroy this object via the
  /// FlutterEngineCreateAOTData and FlutterEngineCollectAOTData methods.
  ///
  /// Embedders can provide either snapshot buffers or aot_data, but not both.
  external FlutterEngineAOTData aot_data;

  /// A callback that computes the locale the platform would natively resolve
  /// to.
  ///
  /// The input parameter is an array of FlutterLocales which represent the
  /// locales supported by the app. One of the input supported locales should
  /// be selected and returned to best match with the user/device's preferred
  /// locale. The implementation should produce a result that as closely
  /// matches what the platform would natively resolve to as possible.
  external FlutterComputePlatformResolvedLocaleCallback
      compute_platform_resolved_locale_callback;

  /// The command line argument count for arguments passed through to the Dart
  /// entrypoint.
  @ffi.Int()
  external int dart_entrypoint_argc;

  /// The command line arguments passed through to the Dart entrypoint. The
  /// strings must be `NULL` terminated.
  ///
  /// The strings will be copied out and so any strings passed in here can
  /// be safely collected after initializing the engine with
  /// `FlutterProjectArgs`.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> dart_entrypoint_argv;

  /// Logging callback for Dart application messages.
  ///
  /// This callback is used by embedder to log print messages from the running
  /// Flutter application. This callback is made on an internal engine managed
  /// thread and embedders must re-thread if necessary. Performing blocking calls
  /// in this callback may introduce application jank.
  external FlutterLogMessageCallback log_message_callback;

  /// A tag string associated with application log messages.
  ///
  /// A log message tag string that can be used convey application, subsystem,
  /// or component name to embedder's logger. This string will be passed to to
  /// callbacks on `log_message_callback`. Defaults to "flutter" if unspecified.
  external ffi.Pointer<ffi.Char> log_tag;

  /// A callback that is invoked right before the engine is restarted.
  ///
  /// This optional callback is typically used to reset states to as if the
  /// engine has just been started, and usually indicates the user has requested
  /// a hot restart (Shift-R in the Flutter CLI.) It is not called the first time
  /// the engine starts.
  ///
  /// The first argument is the `user_data` from `FlutterEngineInitialize`.
  external OnPreEngineRestartCallback on_pre_engine_restart_callback;
}

typedef FlutterPlatformMessageCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<FlutterPlatformMessage>, ffi.Pointer<ffi.Void>)>>;
typedef FlutterUpdateSemanticsNodeCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<FlutterSemanticsNode>, ffi.Pointer<ffi.Void>)>>;
typedef FlutterUpdateSemanticsCustomActionCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<FlutterSemanticsCustomAction>, ffi.Pointer<ffi.Void>)>>;
typedef VsyncCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.IntPtr)>>;

/// An opaque object that describes the AOT data that can be used to launch a
/// FlutterEngine instance in AOT mode.
typedef FlutterEngineAOTData = ffi.Pointer<_FlutterEngineAOTData>;

/// Callback that returns the system locale.
///
/// Embedders that implement this callback should return the `FlutterLocale`
/// from the `supported_locales` list that most closely matches the
/// user/device's preferred locale.
///
/// This callback does not currently provide the user_data baton.
/// https://github.com/flutter/flutter/issues/79826
typedef FlutterComputePlatformResolvedLocaleCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<FlutterLocale> Function(
            ffi.Pointer<ffi.Pointer<FlutterLocale>>, ffi.Size)>>;

/// Logging callback for Dart application messages.
///
/// The `tag` parameter contains a null-terminated string containing a logging
/// tag or component name that can be used to identify system log messages from
/// the app. The `message` parameter contains a null-terminated string
/// containing the message to be logged. `user_data` is a user data baton passed
/// in `FlutterEngineRun`.
typedef FlutterLogMessageCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Void>)>>;
typedef OnPreEngineRestartCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef FlutterEngine = ffi.Pointer<_FlutterEngine>;
typedef FlutterKeyEventCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Bool, ffi.Pointer<ffi.Void>)>>;
typedef FlutterDataCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Void>)>>;
typedef FlutterEngineDartPort = ffi.Int64;

/// A callback made by the engine in response to
/// `FlutterEnginePostCallbackOnAllNativeThreads` on all internal thread.
typedef FlutterNativeThreadCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// Function-pointer-based versions of the APIs above.
class FlutterEngineProcTable extends ffi.Struct {
  /// The size of this struct. Must be sizeof(FlutterEngineProcs).
  @ffi.Size()
  external int struct_size;

  external FlutterEngineCreateAOTDataFnPtr CreateAOTData;

  external FlutterEngineCollectAOTDataFnPtr CollectAOTData;

  external FlutterEngineRunFnPtr Run;

  external FlutterEngineShutdownFnPtr Shutdown;

  external FlutterEngineInitializeFnPtr Initialize;

  external FlutterEngineDeinitializeFnPtr Deinitialize;

  external FlutterEngineRunInitializedFnPtr RunInitialized;

  external FlutterEngineSendWindowMetricsEventFnPtr SendWindowMetricsEvent;

  external FlutterEngineSendPointerEventFnPtr SendPointerEvent;

  external FlutterEngineSendKeyEventFnPtr SendKeyEvent;

  external FlutterEngineSendPlatformMessageFnPtr SendPlatformMessage;

  external FlutterEnginePlatformMessageCreateResponseHandleFnPtr
      PlatformMessageCreateResponseHandle;

  external FlutterEnginePlatformMessageReleaseResponseHandleFnPtr
      PlatformMessageReleaseResponseHandle;

  external FlutterEngineSendPlatformMessageResponseFnPtr
      SendPlatformMessageResponse;

  external FlutterEngineRegisterExternalTextureFnPtr RegisterExternalTexture;

  external FlutterEngineUnregisterExternalTextureFnPtr
      UnregisterExternalTexture;

  external FlutterEngineMarkExternalTextureFrameAvailableFnPtr
      MarkExternalTextureFrameAvailable;

  external FlutterEngineUpdateSemanticsEnabledFnPtr UpdateSemanticsEnabled;

  external FlutterEngineUpdateAccessibilityFeaturesFnPtr
      UpdateAccessibilityFeatures;

  external FlutterEngineDispatchSemanticsActionFnPtr DispatchSemanticsAction;

  external FlutterEngineOnVsyncFnPtr OnVsync;

  external FlutterEngineReloadSystemFontsFnPtr ReloadSystemFonts;

  external FlutterEngineTraceEventDurationBeginFnPtr TraceEventDurationBegin;

  external FlutterEngineTraceEventDurationEndFnPtr TraceEventDurationEnd;

  external FlutterEngineTraceEventInstantFnPtr TraceEventInstant;

  external FlutterEnginePostRenderThreadTaskFnPtr PostRenderThreadTask;

  external FlutterEngineGetCurrentTimeFnPtr GetCurrentTime;

  external FlutterEngineRunTaskFnPtr RunTask;

  external FlutterEngineUpdateLocalesFnPtr UpdateLocales;

  external FlutterEngineRunsAOTCompiledDartCodeFnPtr RunsAOTCompiledDartCode;

  external FlutterEnginePostDartObjectFnPtr PostDartObject;

  external FlutterEngineNotifyLowMemoryWarningFnPtr NotifyLowMemoryWarning;

  external FlutterEnginePostCallbackOnAllNativeThreadsFnPtr
      PostCallbackOnAllNativeThreads;

  external FlutterEngineNotifyDisplayUpdateFnPtr NotifyDisplayUpdate;

  external FlutterEngineScheduleFrameFnPtr ScheduleFrame;
}

/// Typedefs for the function pointers in FlutterEngineProcTable.
typedef FlutterEngineCreateAOTDataFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<FlutterEngineAOTDataSource>,
            ffi.Pointer<FlutterEngineAOTData>)>>;
typedef FlutterEngineCollectAOTDataFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngineAOTData)>>;
typedef FlutterEngineRunFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Size,
            ffi.Pointer<FlutterRendererConfig>,
            ffi.Pointer<FlutterProjectArgs>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<FlutterEngine>)>>;
typedef FlutterEngineShutdownFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;
typedef FlutterEngineInitializeFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Size,
            ffi.Pointer<FlutterRendererConfig>,
            ffi.Pointer<FlutterProjectArgs>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<FlutterEngine>)>>;
typedef FlutterEngineDeinitializeFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;
typedef FlutterEngineRunInitializedFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;
typedef FlutterEngineSendWindowMetricsEventFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, ffi.Pointer<FlutterWindowMetricsEvent>)>>;
typedef FlutterEngineSendPointerEventFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, ffi.Pointer<FlutterPointerEvent>, ffi.Size)>>;
typedef FlutterEngineSendKeyEventFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, ffi.Pointer<FlutterKeyEvent>,
            FlutterKeyEventCallback, ffi.Pointer<ffi.Void>)>>;
typedef FlutterEngineSendPlatformMessageFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, ffi.Pointer<FlutterPlatformMessage>)>>;
typedef FlutterEnginePlatformMessageCreateResponseHandleFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine,
            FlutterDataCallback,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Pointer<FlutterPlatformMessageResponseHandle>>)>>;
typedef FlutterEnginePlatformMessageReleaseResponseHandleFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, ffi.Pointer<FlutterPlatformMessageResponseHandle>)>>;
typedef FlutterEngineSendPlatformMessageResponseFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine,
            ffi.Pointer<FlutterPlatformMessageResponseHandle>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size)>>;
typedef FlutterEngineRegisterExternalTextureFnPtr = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>;
typedef FlutterEngineUnregisterExternalTextureFnPtr = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>;
typedef FlutterEngineMarkExternalTextureFrameAvailableFnPtr = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int64)>>;
typedef FlutterEngineUpdateSemanticsEnabledFnPtr = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Bool)>>;
typedef FlutterEngineUpdateAccessibilityFeaturesFnPtr = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine, ffi.Int32)>>;
typedef FlutterEngineDispatchSemanticsActionFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, ffi.Uint64, ffi.Int32,
            ffi.Pointer<ffi.Uint8>, ffi.Size)>>;
typedef FlutterEngineOnVsyncFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, ffi.IntPtr, ffi.Uint64, ffi.Uint64)>>;
typedef FlutterEngineReloadSystemFontsFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;
typedef FlutterEngineTraceEventDurationBeginFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
typedef FlutterEngineTraceEventDurationEndFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
typedef FlutterEngineTraceEventInstantFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
typedef FlutterEnginePostRenderThreadTaskFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, VoidCallback, ffi.Pointer<ffi.Void>)>>;
typedef FlutterEngineGetCurrentTimeFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function()>>;
typedef FlutterEngineRunTaskFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, ffi.Pointer<FlutterTask>)>>;
typedef FlutterEngineUpdateLocalesFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            FlutterEngine, ffi.Pointer<ffi.Pointer<FlutterLocale>>, ffi.Size)>>;
typedef FlutterEngineRunsAOTCompiledDartCodeFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function()>>;
typedef FlutterEnginePostDartObjectFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, FlutterEngineDartPort,
            ffi.Pointer<FlutterEngineDartObject>)>>;
typedef FlutterEngineNotifyLowMemoryWarningFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;
typedef FlutterEnginePostCallbackOnAllNativeThreadsFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, FlutterNativeThreadCallback,
            ffi.Pointer<ffi.Void>)>>;
typedef FlutterEngineNotifyDisplayUpdateFnPtr = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(FlutterEngine, ffi.Int32,
            ffi.Pointer<FlutterEngineDisplay>, ffi.Size)>>;
typedef FlutterEngineScheduleFrameFnPtr
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(FlutterEngine)>>;

const int FLUTTER_ENGINE_VERSION = 1;
