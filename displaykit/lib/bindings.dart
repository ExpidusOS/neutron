// ingore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_name

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:neutron_elemental/bindings.dart' as _imp1;

/// Bindings for Neutron's DisplayKit
///
class NeutronDisplayKit {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NeutronDisplayKit(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NeutronDisplayKit.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Size> _NT_DISPLAY_OUTPUT_SIZE =
      _lookup<ffi.Size>('NT_DISPLAY_OUTPUT_SIZE');

  int get NT_DISPLAY_OUTPUT_SIZE => _NT_DISPLAY_OUTPUT_SIZE.value;

  set NT_DISPLAY_OUTPUT_SIZE(int value) =>
      _NT_DISPLAY_OUTPUT_SIZE.value = value;

  ffi.Pointer<NtDisplayOutput> NT_DISPLAY_OUTPUT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_DISPLAY_OUTPUT(
      instance,
    );
  }

  late final _NT_DISPLAY_OUTPUTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtDisplayOutput> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_DISPLAY_OUTPUT');
  late final _NT_DISPLAY_OUTPUT = _NT_DISPLAY_OUTPUTPtr.asFunction<
      ffi.Pointer<NtDisplayOutput> Function(
          ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_DISPLAY_OUTPUT(
    ffi.Pointer<NtDisplayOutput> self,
  ) {
    return _NT_IS_DISPLAY_OUTPUT(
      self,
    );
  }

  late final _NT_IS_DISPLAY_OUTPUTPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtDisplayOutput>)>>(
      'NT_IS_DISPLAY_OUTPUT');
  late final _NT_IS_DISPLAY_OUTPUT = _NT_IS_DISPLAY_OUTPUTPtr.asFunction<
      bool Function(ffi.Pointer<NtDisplayOutput>)>();

  _imp1.NtType nt_display_output_get_type() {
    return _nt_display_output_get_type();
  }

  late final _nt_display_output_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_display_output_get_type');
  late final _nt_display_output_get_type =
      _nt_display_output_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_DISPLAY_CLIENT_SIZE =
      _lookup<ffi.Size>('NT_DISPLAY_CLIENT_SIZE');

  int get NT_DISPLAY_CLIENT_SIZE => _NT_DISPLAY_CLIENT_SIZE.value;

  set NT_DISPLAY_CLIENT_SIZE(int value) =>
      _NT_DISPLAY_CLIENT_SIZE.value = value;

  ffi.Pointer<NtDisplayClient> NT_DISPLAY_CLIENT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_DISPLAY_CLIENT(
      instance,
    );
  }

  late final _NT_DISPLAY_CLIENTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtDisplayClient> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_DISPLAY_CLIENT');
  late final _NT_DISPLAY_CLIENT = _NT_DISPLAY_CLIENTPtr.asFunction<
      ffi.Pointer<NtDisplayClient> Function(
          ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_DISPLAY_CLIENT(
    ffi.Pointer<NtDisplayClient> self,
  ) {
    return _NT_IS_DISPLAY_CLIENT(
      self,
    );
  }

  late final _NT_IS_DISPLAY_CLIENTPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtDisplayClient>)>>(
      'NT_IS_DISPLAY_CLIENT');
  late final _NT_IS_DISPLAY_CLIENT = _NT_IS_DISPLAY_CLIENTPtr.asFunction<
      bool Function(ffi.Pointer<NtDisplayClient>)>();

  _imp1.NtType nt_display_client_get_type() {
    return _nt_display_client_get_type();
  }

  late final _nt_display_client_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_display_client_get_type');
  late final _nt_display_client_get_type =
      _nt_display_client_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_DISPLAY_CONTEXT_SIZE =
      _lookup<ffi.Size>('NT_DISPLAY_CONTEXT_SIZE');

  int get NT_DISPLAY_CONTEXT_SIZE => _NT_DISPLAY_CONTEXT_SIZE.value;

  set NT_DISPLAY_CONTEXT_SIZE(int value) =>
      _NT_DISPLAY_CONTEXT_SIZE.value = value;

  ffi.Pointer<NtDisplayContext> NT_DISPLAY_CONTEXT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_DISPLAY_CONTEXT(
      instance,
    );
  }

  late final _NT_DISPLAY_CONTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtDisplayContext> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_DISPLAY_CONTEXT');
  late final _NT_DISPLAY_CONTEXT = _NT_DISPLAY_CONTEXTPtr.asFunction<
      ffi.Pointer<NtDisplayContext> Function(
          ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_DISPLAY_CONTEXT(
    ffi.Pointer<NtDisplayContext> self,
  ) {
    return _NT_IS_DISPLAY_CONTEXT(
      self,
    );
  }

  late final _NT_IS_DISPLAY_CONTEXTPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtDisplayContext>)>>(
      'NT_IS_DISPLAY_CONTEXT');
  late final _NT_IS_DISPLAY_CONTEXT = _NT_IS_DISPLAY_CONTEXTPtr.asFunction<
      bool Function(ffi.Pointer<NtDisplayContext>)>();

  _imp1.NtType nt_display_context_get_type() {
    return _nt_display_context_get_type();
  }

  late final _nt_display_context_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_display_context_get_type');
  late final _nt_display_context_get_type =
      _nt_display_context_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_DISPLAY_VIEW_SIZE =
      _lookup<ffi.Size>('NT_DISPLAY_VIEW_SIZE');

  int get NT_DISPLAY_VIEW_SIZE => _NT_DISPLAY_VIEW_SIZE.value;

  set NT_DISPLAY_VIEW_SIZE(int value) => _NT_DISPLAY_VIEW_SIZE.value = value;

  ffi.Pointer<NtDisplayView> NT_DISPLAY_VIEW(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_DISPLAY_VIEW(
      instance,
    );
  }

  late final _NT_DISPLAY_VIEWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtDisplayView> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_DISPLAY_VIEW');
  late final _NT_DISPLAY_VIEW = _NT_DISPLAY_VIEWPtr.asFunction<
      ffi.Pointer<NtDisplayView> Function(ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_DISPLAY_VIEW(
    ffi.Pointer<NtDisplayView> self,
  ) {
    return _NT_IS_DISPLAY_VIEW(
      self,
    );
  }

  late final _NT_IS_DISPLAY_VIEWPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtDisplayView>)>>(
      'NT_IS_DISPLAY_VIEW');
  late final _NT_IS_DISPLAY_VIEW = _NT_IS_DISPLAY_VIEWPtr.asFunction<
      bool Function(ffi.Pointer<NtDisplayView>)>();

  _imp1.NtType nt_display_view_get_type() {
    return _nt_display_view_get_type();
  }

  late final _nt_display_view_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_display_view_get_type');
  late final _nt_display_view_get_type =
      _nt_display_view_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_DISPLAY_COMPOSITOR_SIZE =
      _lookup<ffi.Size>('NT_DISPLAY_COMPOSITOR_SIZE');

  int get NT_DISPLAY_COMPOSITOR_SIZE => _NT_DISPLAY_COMPOSITOR_SIZE.value;

  set NT_DISPLAY_COMPOSITOR_SIZE(int value) =>
      _NT_DISPLAY_COMPOSITOR_SIZE.value = value;

  ffi.Pointer<NtDisplayCompositor> NT_DISPLAY_COMPOSITOR(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_DISPLAY_COMPOSITOR(
      instance,
    );
  }

  late final _NT_DISPLAY_COMPOSITORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtDisplayCompositor> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_DISPLAY_COMPOSITOR');
  late final _NT_DISPLAY_COMPOSITOR = _NT_DISPLAY_COMPOSITORPtr.asFunction<
      ffi.Pointer<NtDisplayCompositor> Function(
          ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_DISPLAY_COMPOSITOR(
    ffi.Pointer<NtDisplayCompositor> self,
  ) {
    return _NT_IS_DISPLAY_COMPOSITOR(
      self,
    );
  }

  late final _NT_IS_DISPLAY_COMPOSITORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<NtDisplayCompositor>)>>('NT_IS_DISPLAY_COMPOSITOR');
  late final _NT_IS_DISPLAY_COMPOSITOR = _NT_IS_DISPLAY_COMPOSITORPtr
      .asFunction<bool Function(ffi.Pointer<NtDisplayCompositor>)>();

  _imp1.NtType nt_display_compositor_get_type() {
    return _nt_display_compositor_get_type();
  }

  late final _nt_display_compositor_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_display_compositor_get_type');
  late final _nt_display_compositor_get_type =
      _nt_display_compositor_get_typePtr.asFunction<_imp1.NtType Function()>();
}

/// NtDisplayOutput:
/// @instance: The %NtTypeInstance associated with this
/// @destroy: The event emitted when the output is destroyed
///
/// A display output
class _NtDisplayOutput extends ffi.Struct {
  external _imp1.NtTypeInstance instance;

  external ffi.Pointer<_imp1.NtSignal> destroy;
}

/// NtDisplayOutput:
/// @instance: The %NtTypeInstance associated with this
/// @destroy: The event emitted when the output is destroyed
///
/// A display output
typedef NtDisplayOutput = _NtDisplayOutput;

/// NtDisplayClient:
/// @instance: The %NtTypeInstance associated with this
class _NtDisplayClient extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtDisplayClient:
/// @instance: The %NtTypeInstance associated with this
typedef NtDisplayClient = _NtDisplayClient;

/// NtDisplayContext:
/// @instance: The %NtTypeInstance associated with this
/// @view_new: Event emitted when a new view is created
/// @output_new: Event emitted when a new output is created
///
/// An abstract type for all clients and compositors
class _NtDisplayContext extends ffi.Struct {
  external _imp1.NtTypeInstance instance;

  external ffi.Pointer<_imp1.NtSignal> view_new;

  external ffi.Pointer<_imp1.NtSignal> output_new;
}

/// NtDisplayContext:
/// @instance: The %NtTypeInstance associated with this
/// @view_new: Event emitted when a new view is created
/// @output_new: Event emitted when a new output is created
///
/// An abstract type for all clients and compositors
typedef NtDisplayContext = _NtDisplayContext;

/// NtDisplayView:
/// @instance: The %NtTypeInstance associated with this
/// @destroy: The event emitted when the view is destroyed
///
/// A window
class _NtDisplayView extends ffi.Struct {
  external _imp1.NtTypeInstance instance;

  external ffi.Pointer<_imp1.NtSignal> destroy;
}

/// NtDisplayView:
/// @instance: The %NtTypeInstance associated with this
/// @destroy: The event emitted when the view is destroyed
///
/// A window
typedef NtDisplayView = _NtDisplayView;

/// NtDisplayCompositor:
/// @instance: The %NtTypeInstance associated with this
class _NtDisplayCompositor extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtDisplayCompositor:
/// @instance: The %NtTypeInstance associated with this
typedef NtDisplayCompositor = _NtDisplayCompositor;
