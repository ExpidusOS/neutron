// ingore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_name

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:neutron_elemental/bindings.dart' as _imp1;

/// Bindings for Neutron's InputCore
///
class NeutronInputCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NeutronInputCore(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NeutronInputCore.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Size> _NT_KEYBOARD_INPUT_SIZE =
      _lookup<ffi.Size>('NT_KEYBOARD_INPUT_SIZE');

  int get NT_KEYBOARD_INPUT_SIZE => _NT_KEYBOARD_INPUT_SIZE.value;

  set NT_KEYBOARD_INPUT_SIZE(int value) =>
      _NT_KEYBOARD_INPUT_SIZE.value = value;

  ffi.Pointer<NtKeyboardInput> NT_KEYBOARD_INPUT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_KEYBOARD_INPUT(
      instance,
    );
  }

  late final _NT_KEYBOARD_INPUTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtKeyboardInput> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_KEYBOARD_INPUT');
  late final _NT_KEYBOARD_INPUT = _NT_KEYBOARD_INPUTPtr.asFunction<
      ffi.Pointer<NtKeyboardInput> Function(
          ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_KEYBOARD_INPUT(
    ffi.Pointer<NtKeyboardInput> self,
  ) {
    return _NT_IS_KEYBOARD_INPUT(
      self,
    );
  }

  late final _NT_IS_KEYBOARD_INPUTPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtKeyboardInput>)>>(
      'NT_IS_KEYBOARD_INPUT');
  late final _NT_IS_KEYBOARD_INPUT = _NT_IS_KEYBOARD_INPUTPtr.asFunction<
      bool Function(ffi.Pointer<NtKeyboardInput>)>();

  _imp1.NtType nt_keyboard_input_get_type() {
    return _nt_keyboard_input_get_type();
  }

  late final _nt_keyboard_input_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_keyboard_input_get_type');
  late final _nt_keyboard_input_get_type =
      _nt_keyboard_input_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_INPUT_DEVICE_SIZE =
      _lookup<ffi.Size>('NT_INPUT_DEVICE_SIZE');

  int get NT_INPUT_DEVICE_SIZE => _NT_INPUT_DEVICE_SIZE.value;

  set NT_INPUT_DEVICE_SIZE(int value) => _NT_INPUT_DEVICE_SIZE.value = value;

  ffi.Pointer<NtInputDevice> NT_INPUT_DEVICE(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_INPUT_DEVICE(
      instance,
    );
  }

  late final _NT_INPUT_DEVICEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtInputDevice> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_INPUT_DEVICE');
  late final _NT_INPUT_DEVICE = _NT_INPUT_DEVICEPtr.asFunction<
      ffi.Pointer<NtInputDevice> Function(ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_INPUT_DEVICE(
    ffi.Pointer<NtInputDevice> self,
  ) {
    return _NT_IS_INPUT_DEVICE(
      self,
    );
  }

  late final _NT_IS_INPUT_DEVICEPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtInputDevice>)>>(
      'NT_IS_INPUT_DEVICE');
  late final _NT_IS_INPUT_DEVICE = _NT_IS_INPUT_DEVICEPtr.asFunction<
      bool Function(ffi.Pointer<NtInputDevice>)>();

  _imp1.NtType nt_input_device_get_type() {
    return _nt_input_device_get_type();
  }

  late final _nt_input_device_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_input_device_get_type');
  late final _nt_input_device_get_type =
      _nt_input_device_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_MOUSE_INPUT_SIZE =
      _lookup<ffi.Size>('NT_MOUSE_INPUT_SIZE');

  int get NT_MOUSE_INPUT_SIZE => _NT_MOUSE_INPUT_SIZE.value;

  set NT_MOUSE_INPUT_SIZE(int value) => _NT_MOUSE_INPUT_SIZE.value = value;

  ffi.Pointer<NtMouseInput> NT_MOUSE_INPUT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_MOUSE_INPUT(
      instance,
    );
  }

  late final _NT_MOUSE_INPUTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtMouseInput> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_MOUSE_INPUT');
  late final _NT_MOUSE_INPUT = _NT_MOUSE_INPUTPtr.asFunction<
      ffi.Pointer<NtMouseInput> Function(ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_MOUSE_INPUT(
    ffi.Pointer<NtMouseInput> self,
  ) {
    return _NT_IS_MOUSE_INPUT(
      self,
    );
  }

  late final _NT_IS_MOUSE_INPUTPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtMouseInput>)>>(
          'NT_IS_MOUSE_INPUT');
  late final _NT_IS_MOUSE_INPUT = _NT_IS_MOUSE_INPUTPtr.asFunction<
      bool Function(ffi.Pointer<NtMouseInput>)>();

  _imp1.NtType nt_mouse_input_get_type() {
    return _nt_mouse_input_get_type();
  }

  late final _nt_mouse_input_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_mouse_input_get_type');
  late final _nt_mouse_input_get_type =
      _nt_mouse_input_get_typePtr.asFunction<_imp1.NtType Function()>();

  late final ffi.Pointer<ffi.Size> _NT_TOUCH_INPUT_SIZE =
      _lookup<ffi.Size>('NT_TOUCH_INPUT_SIZE');

  int get NT_TOUCH_INPUT_SIZE => _NT_TOUCH_INPUT_SIZE.value;

  set NT_TOUCH_INPUT_SIZE(int value) => _NT_TOUCH_INPUT_SIZE.value = value;

  ffi.Pointer<NtTouchInput> NT_TOUCH_INPUT(
    ffi.Pointer<_imp1.NtTypeInstance> instance,
  ) {
    return _NT_TOUCH_INPUT(
      instance,
    );
  }

  late final _NT_TOUCH_INPUTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NtTouchInput> Function(
              ffi.Pointer<_imp1.NtTypeInstance>)>>('NT_TOUCH_INPUT');
  late final _NT_TOUCH_INPUT = _NT_TOUCH_INPUTPtr.asFunction<
      ffi.Pointer<NtTouchInput> Function(ffi.Pointer<_imp1.NtTypeInstance>)>();

  bool NT_IS_TOUCH_INPUT(
    ffi.Pointer<NtTouchInput> self,
  ) {
    return _NT_IS_TOUCH_INPUT(
      self,
    );
  }

  late final _NT_IS_TOUCH_INPUTPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<NtTouchInput>)>>(
          'NT_IS_TOUCH_INPUT');
  late final _NT_IS_TOUCH_INPUT = _NT_IS_TOUCH_INPUTPtr.asFunction<
      bool Function(ffi.Pointer<NtTouchInput>)>();

  _imp1.NtType nt_touch_input_get_type() {
    return _nt_touch_input_get_type();
  }

  late final _nt_touch_input_get_typePtr =
      _lookup<ffi.NativeFunction<_imp1.NtType Function()>>(
          'nt_touch_input_get_type');
  late final _nt_touch_input_get_type =
      _nt_touch_input_get_typePtr.asFunction<_imp1.NtType Function()>();
}

/// NtKeyboardInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A keyboard input device
class _NtKeyboardInput extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtKeyboardInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A keyboard input device
typedef NtKeyboardInput = _NtKeyboardInput;

/// NtInputDevice:
/// @instance: The %NtTypeInstance associated with this
///
/// A basic type for all input devices
class _NtInputDevice extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtInputDevice:
/// @instance: The %NtTypeInstance associated with this
///
/// A basic type for all input devices
typedef NtInputDevice = _NtInputDevice;

/// NtMouseInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A mouse input device
class _NtMouseInput extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtMouseInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A mouse input device
typedef NtMouseInput = _NtMouseInput;

/// NtTouchInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A touch input device
class _NtTouchInput extends ffi.Struct {
  external _imp1.NtTypeInstance instance;
}

/// NtTouchInput:
/// @instance: The %NtTypeInstance associated with this
/// @see_also: %NtInputDevice
///
/// A touch input device
typedef NtTouchInput = _NtTouchInput;
